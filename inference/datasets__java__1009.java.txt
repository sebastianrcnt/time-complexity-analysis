<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Kello {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n, q, m, max, inp, k, i;
    long in_q;
    n = sc.nextInt();
    q = sc.nextInt();
    int a[] = new int[n - 1];
    int b[] = new int[n - 1];
    int c[] = new int[n - 1];
    max = sc.nextInt();
    for (i = 0; i < n - 1; i++) {
      inp = sc.nextInt();
      a[i] = max;
      b[i] = inp;
      if (inp > max) {
        c[i] = max;
        max = inp;
      } else c[i] = inp;
    }

    for (i = 0; i < q; i++) {
      in_q = sc.nextLong();
      if (in_q < n) System.out.println(a[(int) in_q - 1] + " " + b[(int) in_q - 1]);
      else {
        k = (int) (in_q % (n - 1)) - 1;
        if (k == -1) k = n - 2;
        System.out.println(max + " " + c[k]);
      }
    }
  }

  public static void display(int a[], int b[]) {
    int i;
    for (i = 0; i < a.length; i++) System.out.println(a[i] + " " + b[i]);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code has three nested loops, leading to a total time complexity of O(n^3).</s>