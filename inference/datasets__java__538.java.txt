<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

class PeakElement {

  static int findPeakUtil(int arr[], int low, int high, int n) {

    int mid = low + (high - low) / 2;

    if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid]))
      return mid;
    else if (mid > 0 && arr[mid - 1] > arr[mid]) return findPeakUtil(arr, low, (mid - 1), n);
    else return findPeakUtil(arr, (mid + 1), high, n);
  }

  static int findPeak(int arr[], int n) {

    return findPeakUtil(arr, 0, n - 1, n);
  }

  public static void main(String[] args) {

    int arr[] = {1, 3, 20, 4, 1, 0};

    int n = arr.length;

    System.out.println("Index of a peak point is " + findPeak(arr, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].</s>