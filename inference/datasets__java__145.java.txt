<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

class GFG {

  static int R = 4, C = 4;

  static int first(int arr[], int low, int high) {

    if (high >= low) {

      int mid = low + (high - low) / 2;

      if ((mid == 0 || (arr[mid - 1] == 0)) && arr[mid] == 1) return mid;
      else if (arr[mid] == 0) return first(arr, (mid + 1), high);
      else return first(arr, low, (mid - 1));
    }

    return -1;
  }

  static int rowWithMax1s(int mat[][]) {

    int max_row_index = 0, max = -1;

    int i, index;

    for (i = 0; i < R; i++) {

      index = first(mat[i], 0, C - 1);

      if (index != -1 && C - index > max) {

        max = C - index;

        max_row_index = i;
      }
    }

    return max_row_index;
  }

  public static void main(String[] args) {

    int mat[][] = {{0, 0, 0, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {0, 0, 0, 0}};

    System.out.println("Index of row with maximum 1s is " + rowWithMax1s(mat));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].

Explanation: 
The function first() is recursively called for each row of the matrix until it finds the row with the first occurrence of 1. Therefore, the time complexity of first() function is O(nlogn).
The rowWithMax1s() function is called once in the main() method, and in each iteration of for loop, the function first() is called once, so the time complexity of rowWithMax1s() function is O(n).
Thus, the total time complexity of the given code is O(nlogn) + O(n).</s>