<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class LinkedList {

  static Node head;

  static class Node {

    int data;

    Node next;

    Node(int d) {

      data = d;

      next = null;
    }
  }

  void remove_duplicates() {

    Node ptr1 = null, ptr2 = null, dup = null;

    ptr1 = head;

    while (ptr1 != null && ptr1.next != null) {

      ptr2 = ptr1;

      while (ptr2.next != null) {

        if (ptr1.data == ptr2.next.data) {

          dup = ptr2.next;

          ptr2.next = ptr2.next.next;

          System.gc();

        } else {

          ptr2 = ptr2.next;
        }
      }

      ptr1 = ptr1.next;
    }
  }

  void printList(Node node) {

    while (node != null) {

      System.out.print(node.data + " ");

      node = node.next;
    }
  }

  public static void main(String[] args) {

    LinkedList list = new LinkedList();

    list.head = new Node(10);

    list.head.next = new Node(12);

    list.head.next.next = new Node(11);

    list.head.next.next.next = new Node(11);

    list.head.next.next.next.next = new Node(12);

    list.head.next.next.next.next.next = new Node(11);

    list.head.next.next.next.next.next.next = new Node(10);

    System.out.println("Linked List before removing duplicates : \n ");

    list.printList(head);

    list.remove_duplicates();

    System.out.println("");

    System.out.println("Linked List after removing duplicates : \n ");

    list.printList(head);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

The loop in the remove_duplicates() method runs n times where n is the number of nodes in the linked list. The inner loop also runs n times in the first iteration, which means it runs n times at most for each iteration of the outer loop. However, we don't have any bounds on the inner loop as we are using a while loop to traverse the linked list. Therefore, the time complexity of the algorithm is O(n) for every iteration. The total time complexity of the algorithm is O(nn) or O(n^2).</s>