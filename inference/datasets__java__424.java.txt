<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GfG {

  static class Node {

    int key;

    Node left, right;
  }

  static int findADepth(Node node) {
    int d = 0;
    while (node != null) {

      d++;

      node = node.left;
    }
    return d;
  }

  static boolean isPerfectRec(Node root, int d, int level) {

    if (root == null) return true;

    if (root.left == null && root.right == null) return (d == level + 1);

    if (root.left == null || root.right == null) return false;

    return isPerfectRec(root.left, d, level + 1) && isPerfectRec(root.right, d, level + 1);
  }

  static boolean isPerfect(Node root) {
    int d = findADepth(root);
    return isPerfectRec(root, d, 0);
  }

  static Node newNode(int k) {

    Node node = new Node();

    node.key = k;

    node.right = null;

    node.left = null;

    return node;
  }

  public static void main(String args[]) {

    Node root = null;

    root = newNode(10);

    root.left = newNode(20);

    root.right = newNode(30);

    root.left.left = newNode(40);

    root.left.right = newNode(50);

    root.right.left = newNode(60);

    root.right.right = newNode(70);

    if (isPerfect(root) == true) System.out.println("Yes");
    else System.out.println("No");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice] (O(n)). This is because the function `findADepth` is called with the node that is being processed, and that node can have up to `n` number of nodes. Additionally, the function `isPerfectRec` is called `n` times in</s>