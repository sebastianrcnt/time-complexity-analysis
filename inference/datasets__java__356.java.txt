<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

class GFG {

  static int nonDecNums(int n) {

    int[][] a = new int[n + 1][10];

    for (int i = 0; i <= 9; i++) a[0][i] = 1;

    for (int i = 1; i <= n; i++) a[i][9] = 1;

    for (int i = 1; i <= n; i++) for (int j = 8; j >= 0; j--) a[i][j] = a[i - 1][j] + a[i][j + 1];

    return a[n][0];
  }

  public static void main(String[] args) {

    int n = 2;

    System.out.println("Non-decreasing digits = " + nonDecNums(n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. To analyze this further, the iterations of the for loop with variable i run from 1 to n, requiring n iterations. Additionally, the inner for loop with variable j run from 8 down to 0, which requires 9 iterations each time i. This results in a total number of iterations equal to 9n, hence the choice of O(n).</s>