<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.PriorityQueue;

class MinSum {

  public static long solve(int[] a) {

    PriorityQueue<Integer> pq = new PriorityQueue<Integer>();

    StringBuilder num1 = new StringBuilder();

    StringBuilder num2 = new StringBuilder();

    for (int x : a) pq.add(x);

    while (!pq.isEmpty()) {

      num1.append(pq.poll() + "");

      if (!pq.isEmpty()) num2.append(pq.poll() + "");
    }

    long sum = Long.parseLong(num1.toString()) + Long.parseLong(num2.toString());

    return sum;
  }

  public static void main(String[] args) {

    int arr[] = {6, 8, 4, 5, 2, 3};

    System.out.println("The required sum is " + solve(arr));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

The reasoning is that the for loop runs n times to iterate through each element in the input array.
The number of operations performed within the loop, which includes the addition of elements to the priority queue, is proportional to n.
Since the while loop iterates n times, the total number of operations is proportional to n^2. Hence, the time complexity of the given code is O(n^2).</s>