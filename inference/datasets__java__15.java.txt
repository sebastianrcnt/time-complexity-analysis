<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Arrays;

public class GFG {

  static void rearrangeArray(int arr[], int n) {

    Arrays.sort(arr);

    int[] tempArr = new int[n];

    int ArrIndex = 0;

    for (int i = 0, j = n - 1; i <= n / 2 || j > n / 2; i++, j--) {

      if (ArrIndex < n) {

        tempArr[ArrIndex] = arr[i];

        ArrIndex++;
      }

      if (ArrIndex < n) {

        tempArr[ArrIndex] = arr[j];

        ArrIndex++;
      }
    }

    for (int i = 0; i < n; i++) arr[i] = tempArr[i];
  }

  public static void main(String args[]) {

    int arr[] = {5, 8, 1, 4, 2, 9, 3, 7, 6};

    int n = arr.length;

    rearrangeArray(arr, n);

    for (int i = 0; i < n; i++) System.out.print(arr[i] + " ");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. The reasoning behind this is that there is one loop (a for loop and a while loop) with a constant number of iterations (n), and another loop with a constant number of iterations (n) within that loop. Therefore, the overall time complexity of the given code is O(n) in the worst case.</s>