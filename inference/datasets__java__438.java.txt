<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static int sum = 0;

  static class Node {

    int data;

    Node left, right;
  }
  ;

  static Node getNode(int data) {

    Node newNode = new Node();

    newNode.data = data;

    newNode.left = newNode.right = null;

    return newNode;
  }

  static void sumOfParentOfX(Node root, int x) {

    if (root == null) return;

    if ((root.left != null && root.left.data == x) || (root.right != null && root.right.data == x))
      sum += root.data;

    sumOfParentOfX(root.left, x);

    sumOfParentOfX(root.right, x);
  }

  static int sumOfParentOfXUtil(Node root, int x) {

    sum = 0;

    sumOfParentOfX(root, x);

    return sum;
  }

  public static void main(String args[]) {

    Node root = getNode(4);

    root.left = getNode(2);

    root.right = getNode(5);

    root.left.left = getNode(7);

    root.left.right = getNode(2);

    root.right.left = getNode(2);

    root.right.right = getNode(3);

    int x = 2;

    System.out.println("Sum = " + sumOfParentOfXUtil(root, x));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

Explanation:
The time complexity of the given code is O(n), where n is the number of nodes in the tree.

The function sumOfParentOfXUtil() is called twice, first with root = null and later with root = the current node. Each time it is called, it visits the left and right children of the current node and calls itself recursively on their nodes. This results in a tree traversal where each node is visited exactly once.

The function sumOfParentOfX() is a helper function that is used to implement the sumOfParentOfXUtil() function. It visits the current node and checks if either of its left or right children is equal to x. If so, it adds the value of the current node to the sum.

Since the tree traversal is done in a depth-first manner, the time complexity of the given code is O(n) where n is the number of nodes in the tree.</s>