<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

class KeyComparator implements Comparator<Key> {

  public int compare(Key k1, Key k2) {

    if (k1.freq < k2.freq) return 1;
    else if (k1.freq > k2.freq) return -1;

    return 0;
  }
}

class Key {

  int freq;

  char ch;

  Key(int val, char c) {

    freq = val;

    ch = c;
  }
}

class GFG {

  static int MAX_CHAR = 26;

  static void rearrangeString(String str) {

    int n = str.length();

    int[] count = new int[MAX_CHAR];

    for (int i = 0; i < n; i++) count[str.charAt(i) - 'a']++;

    PriorityQueue<Key> pq = new PriorityQueue<>(new KeyComparator());

    for (char c = 'a'; c <= 'z'; c++) {

      int val = c - 'a';

      if (count[val] > 0) pq.add(new Key(count[val], c));
    }

    str = "";

    Key prev = new Key(-1, '#');

    while (pq.size() != 0) {

      Key k = pq.peek();

      pq.poll();

      str = str + k.ch;

      if (prev.freq > 0) pq.add(prev);

      (k.freq)--;

      prev = k;
    }

    if (n != str.length()) System.out.println(" Not valid String ");
    else System.out.println(str);
  }

  public static void main(String args[]) {

    String str = "bbbaa";

    rearrangeString(str);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].</s>