<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Scanner;

public class JavaApplication2 {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int li[] = new int[n];
    for (int i = 0; i < n; i++) {
      li[i] = sc.nextInt();
    }
    int max = 0;
    int c = 0;
    for (int i = 0; i < n; i++) {
      c = 0;
      for (int j = i; j < n; j++) {
        if (j != n - 1 && j != 0 && li[j] - li[j - 1] == 1 && li[j + 1] - li[j] == 1) {
          c++;
          i++;
        } else if (j != n - 1 && j == 0 && li[j + 1] - li[j] == 1 && li[j] == 1) {
          c++;
          i++;
        } else if (j == n - 1 && j != 0 && li[j] - li[j - 1] == 1 && li[j] == 1000) {
          c++;
          i++;
        } else {
          break;
        }
      }
      if (c > max) {
        max = c;
      }
    }
    if (c > max) {
      max = c;
    }
    System.out.println(max);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice] (O(n^2)) because of the two nested loops. The outer loop runs n times, and the inner loop runs n times for each iteration of the outer loop, leading to a total time complexity of O(n^2).</s>