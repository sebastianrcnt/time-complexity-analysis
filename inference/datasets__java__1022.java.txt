<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Main {

  public static void main(String[] args) {

    Scanner scan = new Scanner(System.in);
    int T = scan.nextInt();
    for (; T > 0; T--) {
      int n = scan.nextInt();
      int[] arr = new int[n];
      for (int i = 0; i < n; i++) arr[i] = scan.nextInt();
      int m1 = 1, m2 = 1;
      for (int i = 0; i < n; i++) {
        if (arr[i] >= m1) {
          m2 = m1;
          m1 = arr[i];
        } else if (arr[i] >= m2) {
          m2 = arr[i];
        }
      }
      System.out.println(Math.min(Math.min(m1, m2) - 1, n - 2));
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. The algorithm uses two pointers, m1 and m2, iterate through the array while maintaining m1 and m2 as the two minimum numbers seen in the array so far. Each iteration of the outer loop only takes constant time, as it iterates until T is equal to 0. Therefore, the algorithm has a time complexity of O(logn).

Note: This answer assumes that the size of the input n is within a moderate range</s>