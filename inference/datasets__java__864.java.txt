<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class LectureSleep {

  static class InputReader {
    BufferedReader reader;
    StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
      reader = new BufferedReader(new InputStreamReader(stream), 32768);
      tokenizer = null;
    }

    String next() {
      while (tokenizer == null || !tokenizer.hasMoreTokens()) {
        try {
          tokenizer = new StringTokenizer(reader.readLine());
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
      return tokenizer.nextToken();
    }

    public int nextInt() {
      return Integer.parseInt(next());
    }

    public long nextLong() {
      return Long.parseLong(next());
    }

    public double nextDouble() {
      return Double.parseDouble(next());
    }

    public float nextFloat() {
      return Float.parseFloat(next());
    }
  }

  static InputReader r = new InputReader(System.in);
  static PrintWriter pw = new PrintWriter(System.out);

  public static void main(String[] args) {
    int n = r.nextInt();
    int k = r.nextInt();
    int[] theorems = new int[n + 1];
    for (int i = 1; i <= n; i++) {
      theorems[i] = r.nextInt();
    }
    int[] mishka = new int[n + 1];
    for (int i = 1; i <= n; i++) {
      mishka[i] = r.nextInt();
    }
    int[] sums = new int[n + 1];
    for (int i = 1; i <= n; i++) {
      if (mishka[i] == 0) {
        sums[i] = sums[i - 1] + theorems[i];
      } else {
        sums[i] = sums[i - 1];
      }
    }
    int max = 0;
    for (int i = 1; i <= n - k + 1; i++) {
      int sum = sums[i + k - 1] - sums[i - 1];
      max = Math.max(max, sum);
    }
    int totalSum = 0;
    for (int i = 1; i <= n; i++) {
      if (mishka[i] == 1) {
        totalSum += theorems[i];
      }
    }

    pw.println(totalSum + max);

    pw.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].</s>