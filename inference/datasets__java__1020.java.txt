<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class ayyyyyy {
  public static void main(String[] args) {
    new ayyyyyy();
  }

  Scanner in = new Scanner(System.in);
  PrintWriter out = new PrintWriter(System.out);

  int t, n;
  int[] a;

  ayyyyyy() {
    t = in.nextInt();
    while (t-- > 0) {
      a = new int[n = in.nextInt()];
      for (int i = 0; i < n; i++) a[i] = in.nextInt();
      shuffle(a);
      Arrays.sort(a);
      out.println(Math.min(n - 2, a[n - 2] - 1));
    }

    out.close();
  }

  void shuffle(int[] x) {
    for (int i = 0; i < n; i++) {
      int swp = (int) (n * Math.random());
      int tmp = x[swp];
      x[swp] = x[i];
      x[i] = tmp;
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

This is because the program performs an n log n operation to sort the input array using Arrays.sort() before shuffling it with the O(n) operation in the shuffle() function. Since the function is called n times, and the sorting operation itself also takes O(n log n) time, the total time complexity of the program is O(n log n) + O(n log n) = O(n log n) which is the option [choice]1[/choice].</s>