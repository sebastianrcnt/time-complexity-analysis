<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  public static void print2largest(int arr[], int arr_size) {

    int i, first, second;

    if (arr_size < 2) {

      System.out.print(" Invalid Input ");

      return;
    }

    first = second = Integer.MIN_VALUE;

    for (i = 0; i < arr_size; i++) {

      if (arr[i] > first) {

        second = first;

        first = arr[i];

      } else if (arr[i] > second && arr[i] != first) second = arr[i];
    }

    if (second == Integer.MIN_VALUE) System.out.print("There is no second largest" + " element\n");
    else System.out.print("The second largest element" + " is " + second);
  }

  public static void main(String[] args) {

    int arr[] = {12, 35, 1, 10, 34, 1};

    int n = arr.length;

    print2largest(arr, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

Explanation: The loop runs n times, where n is the size of the given array. In each iteration of the loop, there are at most two comparisons being made (first and second). So, the overall time complexity of the loop is O(n) + O(lagn), where lagn denotes the maximum number of comparisons possible in an iteration. lagn is at most 2, so the overall time complexity of the loop is O(n + 2) = O(n).</s>