<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
def quick_sort(data: list) -> list:
    """
    >>> for data in ([2, 1, 0], [2.2, 1.1, 0], "quick_sort"):
    ...     quick_sort(data) == sorted(data)
    True
    True
    True
    """
    if len(data) <= 1:
        return data
    else:
        return [
            *quick_sort([e for e in data[1:] if e <= data[0]]),
            data[0],
            *quick_sort([e for e in data[1:] if e > data[0]]),
        ]


if __name__ == "__main__":
    import doctest

    doctest.testmod()


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation:
The quick sort function divides the given list 'data' into two parts: one with all elements less than or equal to the first element of the list, and the other with all elements greater than the first element of the list.
The recursion stops when 'len(data)' is less than or equal to 1.
Then the sorting is done which is considered O(1) operation as it sorts the list in a constant time.
The recursion call for both parts (left and right) takes constant space.
Therefore the time complexity of the quick sort function is O(n) where n is the size of the list.</s>