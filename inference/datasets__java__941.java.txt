<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class D999 {
  public static void main(String args[]) throws IOException {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int m = sc.nextInt();
    int req = n / m;
    int arr[] = new int[n + 1];
    int size[] = new int[m];
    List<Integer> list[] = new ArrayList[m];
    for (int i = 0; i < m; i++) {
      list[i] = new ArrayList<>();
    }
    for (int i = 1; i <= n; i++) {
      arr[i] = sc.nextInt();
      size[arr[i] % m]++;
      list[arr[i] % m].add(i);
    }
    long tot = 0;
    int x = 0, y = 0;
    List<Integer> idx = new ArrayList<>();
    for (int i = 0; i < 2 * m; i++) {

      if (size[i % m] > req) {
        for (int j = 0; j < size[i % m] - req; j++) {
          idx.add(list[i % m].get(j));
          y++;
        }
        size[i % m] = req;

      } else if (size[i % m] < req) {

        while (x != y && size[i % m] < req) {
          int num = arr[idx.get(x)];
          int gg = i - num % m;
          tot += gg;
          arr[idx.get(x)] += gg;
          x++;
          size[i % m]++;
        }
      }
    }
    System.out.println(tot);
    for (int i = 1; i <= n; i++) {
      System.out.print(arr[i] + " ");
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation: 
1. The given code loops through the input `n` times to iterate through the values of `arr`.
2. For each loop, the inner loop `m` times is executed.
3. In total, the inner loop iterates through `arr` `m` times.
4. Therefore, the total time complexity for this code is O(nm).</s>