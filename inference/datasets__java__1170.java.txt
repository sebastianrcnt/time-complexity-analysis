<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Codechef {
  public static void main(String[] args) throws java.lang.Exception {

    Scanner in = new Scanner(System.in);
    long x = in.nextLong();
    long k = in.nextLong();

    long mod = 1000000007;
    long get = power(2, k, mod);
    long ans = ((get % mod) * ((2 * x) % mod)) % mod - get + 1;
    if (ans < 0) ans += mod;
    if (x == 0) ans = 0;
    System.out.println(ans);
  }

  static long power(long x, long y, long p) {

    long res = 1;

    x = x % p;

    while (y > 0) {

      if ((y & 1) == 1) res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
    }
    return res;
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. The O(n) time complexity is achieved because the code has a loop which runs from 0 to k and performs a constant amount of operations during each iteration.</s>