<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class Main {

  static int findMaximum(int arr[], int low, int high) {

    if (low == high) return arr[low];

    if ((high == low + 1) && arr[low] >= arr[high]) return arr[low];

    if ((high == low + 1) && arr[low] < arr[high]) return arr[high];

    int mid = (low + high) / 2;

    if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) return arr[mid];

    if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1]) return findMaximum(arr, low, mid - 1);
    else return findMaximum(arr, mid + 1, high);
  }

  public static void main(String[] args) {

    int arr[] = {1, 3, 50, 10, 9, 7, 6};

    int n = arr.length;

    System.out.println("The maximum element is " + findMaximum(arr, 0, n - 1));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. This is because the code uses recursion with a base case (when the low is equal to the high) of O(1). The logarithmic operations divide the search space in half at each level and reduce the number of comparisons needed to find the maximum element. Therefore, the total time complexity of the program is O(logn).</s>