<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class AnnoyingPresent {

  public static void main(String[] args) throws IOException {

    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    long n = Long.parseLong(st.nextToken()), m = Long.parseLong(st.nextToken());

    long sum = 0;

    for (int i = 0; i < m; i++) {
      StringTokenizer st1 = new StringTokenizer(br.readLine());
      sum += n * Long.parseLong(st1.nextToken());
      Long a = Long.parseLong(st1.nextToken());
      if (a < 0) {
        if (n % 2 == 0) sum += n * n / 4 * a;
        else {
          sum += (n / 2) * (n / 2 + 1) * a;
        }
      } else sum += (a * (n) * (n - 1) / 2);
    }
    System.out.println((double) sum / n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. This is because in the loop [for (int i = 0; i < m; i++)], the code performs O(n) operations for each iteration of the loop. Since the loop runs [m] times, the total number of operations performed by the code is O(mn). However, we can see that this operation is still not sufficient to calculate the sum of [m] numbers correctly. Therefore, we need to add the contribution of each number in line [if (a < 0)]. This operation further increases the time complexity to O(mn). Since [m] can be up to [n], the time complexity of the code is O(mn).</s>