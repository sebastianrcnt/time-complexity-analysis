<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class EquilibriumIndex {

  int equilibrium(int arr[], int n) {

    int i, j;

    int leftsum, rightsum;

    for (i = 0; i < n; ++i) {

      leftsum = 0;

      for (j = 0; j < i; j++) leftsum += arr[j];

      rightsum = 0;

      for (j = i + 1; j < n; j++) rightsum += arr[j];

      if (leftsum == rightsum) return i;
    }

    return -1;
  }

  public static void main(String[] args) {

    EquilibriumIndex equi = new EquilibriumIndex();

    int arr[] = {-7, 1, 5, 2, -4, 3, 0};

    int arr_size = arr.length;

    System.out.println(equi.equilibrium(arr, arr_size));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. (O(n^2)) This is because there are two nested loops in the code, one is iterating from 0 to n and the other is iterating from (i+1) to n. This means that each time one of the inner loop is executed, the outer loop gets executed n times. Hence, the overall time complexity is O(n^2).</s>