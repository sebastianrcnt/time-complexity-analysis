<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class PrintLargest {

  static void print3largest(int arr[], int arr_size) {

    int i, first, second, third;

    if (arr_size < 3) {

      System.out.print(" Invalid Input ");

      return;
    }

    third = first = second = Integer.MIN_VALUE;

    for (i = 0; i < arr_size; i++) {

      if (arr[i] > first) {

        third = second;

        second = first;

        first = arr[i];

      } else if (arr[i] > second) {

        third = second;

        second = arr[i];

      } else if (arr[i] > third) third = arr[i];
    }

    System.out.println("Three largest elements are " + first + " " + second + " " + third);
  }

  public static void main(String[] args) {

    int arr[] = {12, 13, 1, 10, 34, 1};

    int n = arr.length;

    print3largest(arr, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. This is because the code is using a simple loop to iterate through the array and compare elements. The number of iterations in the worst case is approximately equal to the size of the array, so the function runs O(n) time.</s>