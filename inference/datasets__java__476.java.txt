<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.Arrays;

class GFG {

  static int maxLevel(int[] boxes, int n) {

    Arrays.sort(boxes);

    int ans = 1;

    int prev_width = boxes[0];

    int prev_count = 1;

    int curr_count = 0;

    int curr_width = 0;

    for (int i = 1; i < n; i++) {

      curr_width += boxes[i];

      curr_count += 1;

      if (curr_width > prev_width && curr_count > prev_count) {

        prev_width = curr_width;

        prev_count = curr_count;

        curr_count = 0;

        curr_width = 0;

        ans++;
      }
    }

    return ans;
  }

  public static void main(String[] args) {

    int[] boxes = {10, 20, 30, 50, 60, 70};

    int n = boxes.length;

    System.out.println(maxLevel(boxes, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice] O(logn).

Explanation: The time complexity of the given code is O(logn) because the algorithm uses a sorting operation which takes O(nlogn) time complexity. The `Arrays.sort(boxes)` statement sorts the given array `boxes` in ascending order. After sorting the array, the code performs a constant number of operations (n) using two variables `prev_count` and `curr_count` to keep track of the number of boxes of the same width in two consecutive levels. Also, the code uses a constant number of operation inside the loop which has a constant time complexity.</s>