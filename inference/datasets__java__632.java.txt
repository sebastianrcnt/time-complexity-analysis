<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Solution {

  public static long page(long p, long k) {

    return (p - 1) / k;
  }

  public static void main(String[] args) throws Exception {
    Scanner sc = new Scanner(System.in);

    long n = sc.nextLong();
    int m = sc.nextInt();
    long k = sc.nextLong();
    long[] p = new long[m];
    long del = 0;
    long nb = 1;
    int op = 0;
    for (int i = 0; i < m; i++) p[i] = sc.nextLong();
    for (int i = 1; i < m; i++) {
      if (page(p[i] - del, k) != page(p[i - 1] - del, k)) {

        del += nb;
        nb = 1;
        op++;

      } else {
        nb++;
      }
    }
    if (nb != 0) op++;

    System.out.println(op);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code runs through the given inputs `n`, `m` and `k` times (n number of pages, m number of sub-arrays and k the value of the sub-array), making a total time of `O(n*m*k)`, which is equivalent to `O(n^3)`.</s>