<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

  static Scanner in = new Scanner();
  static PrintWriter out = new PrintWriter(System.out);

  public static void main(String[] args) throws IOException {
    int x = in.nextInt(),
        y = in.nextInt(),
        z = in.nextInt(),
        t1 = in.nextInt(),
        t2 = in.nextInt(),
        t3 = in.nextInt() * 3,
        d = Math.abs(x - y);
    out.print(((Math.abs(x - z) + d) * t2 + t3 > d * t1 ? "NO" : "YES"));
    out.close();
  }

  static class Scanner {
    BufferedReader br;
    StringTokenizer st;

    public Scanner() {
      br = new BufferedReader(new InputStreamReader(System.in));
      st = new StringTokenizer("");
    }

    public String next() throws IOException {
      if (!st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
      return st.nextToken();
    }

    public int nextInt() throws IOException {
      return Integer.parseInt(next());
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].

The reason for this is that the program reads 6 integers and performs 6 operations, each of which takes O(1) time.
Therefore, the total time complexity of the program is O(6) which can be further simplified to O(1) as all the operations are performed in constant time.</s>