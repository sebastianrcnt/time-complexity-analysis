<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Scanner;

public class BigInteger7 {
  public static void main(String[] args) {

    Scanner scanner = new Scanner(System.in);
    BigInteger n = scanner.nextBigInteger();
    BigInteger k = scanner.nextBigInteger();
    scanner.nextLine();
    String string = scanner.nextLine();
    char ch[] = string.toCharArray();
    BigInteger ans = BigInteger.ZERO;
    BigInteger number = BigInteger.ZERO;
    Arrays.sort(ch);
    int prev = 0;
    for (int i = 0; BigInteger.valueOf(i).subtract(n).compareTo(BigInteger.ZERO) < 0; i++) {
      if (i == 0) {
        ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
        prev = i;
        number = number.add(BigInteger.ONE);
      } else {
        if (ch[i] - ch[prev] > 1) {
          ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
          prev = i;
          number = number.add(BigInteger.ONE);
        }
      }
      if (number.equals(k)) {
        break;
      }
    }
    if (number.subtract(k).compareTo(BigInteger.ZERO) < 0) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. This is because the code performs an array sort with the time taken by the built-in `Arrays.sort()` function that has an average time complexity of O(nlogn).</s>