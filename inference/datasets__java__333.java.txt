<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class GFG {

  public static int maxSum(int grid[][], int n) {

    int incl = Math.max(grid[0][0], grid[1][0]);

    int excl = 0, excl_new;

    for (int i = 1; i < n; i++) {

      excl_new = Math.max(excl, incl);

      incl = excl + Math.max(grid[0][i], grid[1][i]);

      excl = excl_new;
    }

    return Math.max(excl, incl);
  }

  public static void main(String[] args) {

    int grid[][] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};

    int n = 5;

    System.out.println(maxSum(grid, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. In the worst case, the number of iterations of the for loop will increase linearly with n. Specifically, at each iteration of the loop, we do 2 constant-time operations and n constant-time operations. Since n is the length of the grid, the total number of operations performed by the program will be approximately n*4, or O(n).</s>