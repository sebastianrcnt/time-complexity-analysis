<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])

Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Given Code:
    /*
 * Radix sorts an integer array without comparing the integers.
 * It groups the integers by their digits which share the same
 * significant position.
 * For more information see: https://en.wikipedia.org/wiki/Radix_sort
 */
export function radixSort(items, RADIX) {
  // default radix is then because we usually count to base 10
  if (RADIX === undefined || RADIX < 1) {
    RADIX = 10
  }

  let maxLength = false
  let placement = 1

  while (!maxLength) {
    maxLength = true
    const buckets = []

    for (let i = 0; i < RADIX; i++) {
      buckets.push([])
    }

    for (let j = 0; j < items.length; j++) {
      const tmp = items[j] / placement
      buckets[Math.floor(tmp % RADIX)].push(items[j])
      if (maxLength && tmp > 0) {
        maxLength = false
      }
    }

    let a = 0
    for (let b = 0; b < RADIX; b++) {
      const buck = buckets[b]
      for (let k = 0; k < buck.length; k++) {
        items[a] = buck[k]
        a++
      }
    }
    placement *= RADIX
  }
  return items
}


[choice]4[/choice]
Explanation:
- The outer loop runs n (number of items) times.
- The inner loop runs log(n) + 1 (logarithm of n plus one) times.
- The inner loop is called RADIX times as well (based on the input parameter 'RADIX' which is used to determine the number of digits being sorted).
- Therefore, the total number of loops (excluding the outer one) is (log(n) + 1) * RADIX, which can be simplified to O(nlogn) when RADIX = 10 (default radix).</s>