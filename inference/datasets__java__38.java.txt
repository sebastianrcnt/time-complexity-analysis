<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static void rearrange(int arr[], int n) {

    int temp;

    for (int i = 0; i < n - 1; i++) {

      if (i % 2 == 0 && arr[i] > arr[i + 1]) {

        temp = arr[i];

        arr[i] = arr[i + 1];

        arr[i + 1] = temp;
      }

      if (i % 2 != 0 && arr[i] < arr[i + 1]) {

        temp = arr[i];

        arr[i] = arr[i + 1];

        arr[i + 1] = temp;
      }
    }
  }

  static void printArray(int arr[], int size) {

    for (int i = 0; i < size; i++) System.out.print(arr[i] + " ");

    System.out.println();
  }

  public static void main(String[] args) {

    int arr[] = {6, 4, 2, 1, 8, 3};

    int n = arr.length;

    System.out.print("Before rearranging: \n");

    printArray(arr, n);

    rearrange(arr, n);

    System.out.print("After rearranging: \n");

    printArray(arr, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice], which is O(n).


The code has three nested loops. The outer loop runs for n elements, and the middle loop iterates for n - 1 elements in every case. The inner loop runs from 3 to n - 1 elements in every case, 1 < n - 1 <= n - 1, since it depends on the even/odd index. Therefore, the total time complexity of the function is n*(n - 1) + (n - 1)*(n - 2) + (n - 2)*(n - 3) + ... + 2*1.

So, the total time complexity of the function is n*(n - 1)/2, which simplifies to n^2 + n - 1/2. Since n < 2^31, we can conclude the time complexity of n^2 + n - 1/2 is O(n^2 + n), which simplifies to O(n^2).</s>