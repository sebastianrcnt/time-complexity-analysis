<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.Scanner;

public class abc {
  public static int check(StringBuilder s) {
    int countRemove = 0;
    if (!s.toString().contains("xxx")) return countRemove;
    else {

      for (int i = 1; i < s.length() - 1; i++) {
        if (s.charAt(i - 1) == 'x' && s.charAt(i) == 'x' && s.charAt(i + 1) == 'x') {

          countRemove++;
        }
      }
      return countRemove;
    }
  }

  public static void main(String[] args) {

    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();

    String s = sc.next();
    StringBuilder sb = new StringBuilder("");
    sb.append(s);

    System.out.println(check(sb));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

Explanation:
The given code is checking whether 'xxx' is present in the given string. If present, it is removing one 'xxx' from the string. The time complexity to see whether 'xxx' is present in the string is O(1) as only 4 checks are being done in the given implementation. If 'xxx' is present, the implementation removes it one by one. This operation takes one unit of time (O(1)). So, time complexity of the entire function check() is O(1+1).
But, in the worst case, there may be 'n' instances of 'xxx' in the string and all of them need to be removed. Therefore, we are considering the nested for loop. The time complexity of the outer loop is O(n). The inner loop runs (n - 3 times as there are 3 characters 'xxx' and we are considering the worst case) and each character inside the loop is checked once. Hence, the time complexity of the nested loop is O((n-3)*4). As we are using StringBuilder, we are not updating the string in the main array. Therefore, the time complexity of the given code is (O(1)+O(n)) x (O(n-3)*4) = O(n^2). But, as we are not updating the main array, we are using StringBuilder, the time complexity of the given code is O(n^2).</s>