<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.awt.*;
import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt(), m = scanner.nextInt();
    int[] vertical = new int[n];

    for (int i = 0; i < n; i++) {
      vertical[i] = scanner.nextInt();
    }

    Arrays.sort(vertical);

    ArrayList<Integer> horisontal = new ArrayList<>();
    int amount = 0;
    for (int i = 0; i < m; i++) {
      int x1 = scanner.nextInt(), x2 = scanner.nextInt(), y = scanner.nextInt();
      if (x1 == 1) {
        amount++;
        horisontal.add(x2);
      }
    }

    Collections.sort(horisontal);

    if (amount == 0) {
      System.out.println(0);
      return;
    }

    int minVal = amount, horSize = horisontal.size(), verLen = vertical.length;
    int h = 0, v = 0;

    for (; v < verLen && h < horSize; ) {

      while (h < horSize && horisontal.get(h) < vertical[v]) {
        h++;
        amount--;
      }
      minVal = Math.min(minVal, amount + v);

      while (h < horSize && v < verLen && horisontal.get(h) >= vertical[v]) {
        minVal = Math.min(minVal, amount + v);
        v++;
      }
    }

    if (horisontal.get(horSize - 1) < 1E9) {
      minVal = Math.min(minVal, v);
    }

    System.out.println(minVal);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].
The reasoning for this is that the code contains two nested loops, where one is iterating over n and the other is iterating over m. Therefore, the time complexity is O(n\*m), which equals O(n^2).</s>