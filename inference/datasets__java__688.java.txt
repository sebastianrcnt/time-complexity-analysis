<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Main {

  static class FastScanner {
    BufferedReader br;
    StringTokenizer st;

    public FastScanner() {
      try {
        br = new BufferedReader(new InputStreamReader(System.in));
        st = new StringTokenizer(br.readLine());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    public String next() {
      if (st.hasMoreTokens()) return st.nextToken();
      try {
        st = new StringTokenizer(br.readLine());
      } catch (Exception e) {
        e.printStackTrace();
      }
      return st.nextToken();
    }

    public int nextInt() {
      return Integer.parseInt(next());
    }

    public long nextLong() {
      return Long.parseLong(next());
    }

    public double nextDouble() {
      return Double.parseDouble(next());
    }

    public String nextLine() {
      String line = "";
      if (st.hasMoreTokens()) line = st.nextToken();
      else
        try {
          return br.readLine();
        } catch (IOException e) {
          e.printStackTrace();
        }
      while (st.hasMoreTokens()) line += " " + st.nextToken();
      return line;
    }
  }

  public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    PrintWriter pw = new PrintWriter(System.out);

    int n = sc.nextInt();
    int m = sc.nextInt();
    int ans = 0;

    int[] a = new int[101];
    for (int i = 0; i < m; i++) a[sc.nextInt()]++;

    for (int i = 1; i <= 100; i++) {
      int y = 0;
      for (int x : a) {
        y += x / i;
      }
      if (y >= n) {
        ans = i;
      }
    }

    pw.println(ans);
    pw.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. The reason being, the outer loop runs n times, in each iteration the inner loop runs a(i) times (where a(i) is a value in array "a" and i is the index), so overall it runs n*a(i) times, and since a(i) values are between 1 and the value of n, it results in n^2 times.</s>