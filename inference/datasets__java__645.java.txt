<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class TokitsukazeAndEnhancement {

  static char check(int n) {
    if (n % 4 == 0) return 'D';
    if (n % 4 == 1) return 'A';
    if (n % 4 == 2) return 'C';
    return 'B';
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter pw = new PrintWriter(System.out);
    StringTokenizer st;
    int n = Integer.parseInt(br.readLine());
    int a = n + 1;
    int b = n + 2;
    char n1 = check(n);
    char a1 = check(a);
    char b1 = check(b);
    char sol = (char) Math.min(Math.min(a1, b1), n1);
    if (sol == n1) pw.println(0 + " " + sol);
    else if (sol == a1) pw.println(1 + " " + sol);
    else if (sol == b1) pw.println(2 + " " + sol);
    pw.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. The main reason for this is that the code performs linear operations on n variables a, b and n1, whereas the number of operations in the given problem increases linearly with the number of variables.</s>