<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class helloWorld {
  public static void main(String[] args) {
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    int m = in.nextInt();
    int l = 1000, r = 0, u = 1000, b = 0;

    for (int i = 0; i < n; i++) {
      String str = in.next();
      for (int j = 0; j < m; j++)
        if (str.charAt(j) == 'B') {
          l = Math.min(j + 1, l);
          r = Math.max(j + 1, r);
          u = Math.min(i + 1, u);
          b = Math.max(i + 1, b);
        }
    }

    System.out.println((u + b) / 2 + " " + (l + r) / 2);

    in.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. The reason for this choice is that there are two nested loops, one for each string input element, and at each iteration of the outer loop, the inner loop iterates over all the characters in the given string. As there are n string elements in total, the number of iterations for the outer loop is n and the number of iterations for the inner loop is m, which means that the total number of iterations for all characters is nm. As the given code checks the position of the 'B' character in each string character, the time complexity of this algorithm is O(nm), which is equal to O(n^2).</s>