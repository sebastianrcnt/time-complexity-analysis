<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Solution {
  public static void main(String sp[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    String st = sc.next();

    char arr[] = st.toCharArray();

    boolean b = false;
    for (char j = 'a'; j <= 'z'; j++) {
      for (int i = 0; i < arr.length; i++) {
        if (arr[i] == j) {
          arr[i] = '*';
          k--;
        }
        if (k == 0) {
          b = true;
          prin(arr);
          return;
        }
      }
    }
  }

  public static void prin(char arr[]) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < arr.length; i++) {
      if (arr[i] != '*') sb.append(arr[i]);
    }
    if (sb.length() != 0) System.out.println(sb.toString());
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

Explanation:
The code has a nested loop with a single iteration of the outer loop. For each occurrence of a character in the input string, the inner loop is executed once. Therefore, the overall time complexity of the code is O(n*k), which is proportional to the number of characters in the input string times the number of occurrences of that character.

So, the time complexity of the given code is [choice]2[/choice] (O(n)).</s>