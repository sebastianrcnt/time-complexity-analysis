<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Cr500 {
  public static void main(String args[]) {
    Scanner scanner = new Scanner(System.in);
    int n, x, status = -1;
    Set<Integer> a = new HashSet<>(), bitA = new HashSet<>();
    ArrayList<Integer> al = new ArrayList<>(), bl = new ArrayList<>();
    n = scanner.nextInt();
    x = scanner.nextInt();

    for (int i = 0; i < n; i++) {
      int v;
      if (!a.add(v = scanner.nextInt())) {
        System.out.println(0);
        return;
      }

      if (!bitA.add(v & x)) {
        status = 2;
      }
      al.add(v);
      bl.add(v & x);
    }

    if (contains(al, bl)) {
      System.out.println(1);
      return;
    }

    System.out.println(status);
  }

  private static boolean contains(ArrayList<Integer> a, ArrayList<Integer> b) {
    for (int i = 0; i < a.size(); i++) {
      int v1 = a.get(i);
      for (int j = 0; j < b.size(); j++) {
        int v2 = b.get(j);
        if (i != j && v1 == v2) {
          return true;
        }
      }
    }
    return false;
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].
This is because for each input, the code does the following operations:
- it reads in n integers from the user
- it loops through n and adds each integer into a set called a. The add operation in a Set is O(1), so this operation is O(n)
- it loops through n again, performs bitwise AND on each integer with a constant x, and adds the result into a separate set called bitA. The bitwise AND operation is O(1), and addition to a set is O(1). So this operation is also O(n)
- it creates two separate ArrayLists called al and bl by selecting each integer in n and performing bitwise AND on the result. This operation is O(n)
- it then calls the contains() method which checks if each pair of elements present in al and bl have the same value. Iteration through ArrayList is O(n), and if condition is O(1), so the entire contains() method is O(n).
- there is a condition which check whether the size of al and bl is equal, this happen in constant time O(1).
- Finally, it prints out the time complexity which is 3, so the total time complexity of the code is 3.</s>