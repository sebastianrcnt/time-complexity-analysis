<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.math.*;
import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int n = scan.nextInt();
    int m = scan.nextInt();
    int a[] = new int[m + 1];
    int i, j;
    int c = 0;
    for (i = 0; i < n; i++) {
      int l = scan.nextInt();
      int r = scan.nextInt();
      for (j = l; j <= r; j++) {
        if (a[j] != 1) {
          a[j] = 1;
          c++;
        }
      }
    }
    System.out.println(m - c);
    for (i = 1; i <= m; i++) {
      if (a[i] == 0) {
        System.out.print(i + " ");
      }
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice] O(n^2).

Explanation:
The time complexity of the first two nested loops is O(n*logn).
The number of iterations of these loops is n and m respectively and each iteration takes logn time.
The total time taken by this part of the code is O(n*logn).
The rest of the code has a constant time complexity of  O(1).
Therefore, the total time taken by the code is O(n*logn) + O(1) = O(n^2).

Hence, the choice is [choice]4[/choice] O(n^2).</s>