<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Cf1003A {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    StringTokenizer stk = new StringTokenizer(br.readLine());
    int[] arr = new int[100];
    int max = 0;
    int tmp;
    for (int i = 0; i < n; i++) {
      tmp = Integer.parseInt(stk.nextToken()) - 1;
      max = max < ++arr[tmp] ? arr[tmp] : max;
    }
    System.out.println(max);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2.[/choice] 

The reason we have chosen option 2, O(n), is because the code reads n lines from the input, performs n number of operations and the time taken by each operation is constant O(1) on average. Therefore the overall time complexity would be O(n).</s>