<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Main {
  public static void main(String[] args) throws IOException {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[][] point = new int[n][];
    for (int i = 0; i < n; i++) point[i] = new int[] {sc.nextInt(), sc.nextInt()};
    Arrays.sort(point, (a, b) -> ((a[0] - a[1]) - (b[0] - b[1])));
    TreeMap<Integer, Integer> tm = new TreeMap<>();
    int ans = 0;
    for (int i = n - 1; i >= 0; i--) {
      int x = point[i][0], w = point[i][1];
      Map.Entry<Integer, Integer> cur = tm.ceilingEntry(x + w);
      int curRes;
      if (cur == null) curRes = 1;
      else curRes = cur.getValue() + 1;
      ans = Math.max(ans, curRes);
      Map.Entry<Integer, Integer> upper = tm.ceilingEntry(x - w);
      if (upper == null || upper.getValue() < curRes) tm.put(x - w, curRes);
    }
    System.out.println(ans);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice], which is O(nlogn).</s>