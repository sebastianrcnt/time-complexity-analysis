<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class A {
  public static void main(String ar[]) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String s1[] = br.readLine().split(" ");
    int n = Integer.parseInt(s1[0]);
    int m = Integer.parseInt(s1[1]);
    int a[] = new int[n];
    String s2[] = br.readLine().split(" ");
    long S = 0;
    for (int i = 0; i < n; i++) {
      a[i] = Integer.parseInt(s2[i]);
      S += (long) a[i];
    }

    Arrays.sort(a);
    m = a[n - 1];
    int last = 1;
    int t = 1;
    for (int i = 1; i < n - 1; i++) {
      if (a[i] == last) t++;
      else {
        t++;
        last = last + 1;
      }
    }
    if (last < m) {
      t += m - last;
    } else t++;
    System.out.println(S - t);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice], i.e., O(n^2). This is because most of the time is spent on sorting the integers in the array, which takes O(nlogn) time. In addition, there are two for loops that iterate through the array two times, taking O(n) time each, which results in O(2n) time. However, the second loop also performs a constant number of operations for each iteration, such as comparing the current element with the previous one and increasing a counter, taking O(1) time. Therefore, the total time complexity of the program is O(nlogn + 2n) = O(n^2).</s>