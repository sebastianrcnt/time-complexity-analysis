<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.math.*;
import java.util.*;

public class B {
  public static void main(String[] args) throws Exception {
    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    StringTokenizer st = new StringTokenizer(bf.readLine());

    int n = Integer.parseInt(st.nextToken());
    int m = Integer.parseInt(st.nextToken());
    StringBuilder ans1 = new StringBuilder();
    StringBuilder ans2 = new StringBuilder();
    for (int i = 0; i < 2229; i++) ans1.append('5');
    ans1.append('6');
    for (int i = 0; i < 2230; i++) ans2.append('4');
    out.println(ans1.toString());
    out.println(ans2.toString());
    out.close();
    System.exit(0);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. The reason for this is that the code reads a string with 2 space-separated integers, processes these integers, and outputs a string. This operation takes constant time, regardless of the size of the input.</s>