<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class GfG {

  public static int minMaxProduct(int arr1[], int arr2[], int n1, int n2) {

    int max = arr1[0];

    int min = arr2[0];

    int i;

    for (i = 1; i < n1 && i < n2; ++i) {

      if (arr1[i] > max) max = arr1[i];

      if (arr2[i] < min) min = arr2[i];
    }

    while (i < n1) {

      if (arr1[i] > max) max = arr1[i];

      i++;
    }

    while (i < n2) {

      if (arr2[i] < min) min = arr2[i];

      i++;
    }

    return max * min;
  }

  public static void main(String argc[]) {

    int[] arr1 = new int[] {10, 2, 3, 6, 4, 1};

    int[] arr2 = new int[] {5, 1, 4, 2, 6, 9};

    int n1 = 6;

    int n2 = 6;

    System.out.println(minMaxProduct(arr1, arr2, n1, n2));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].
This is because the code uses 2 nested loops to find the maximum and minimum values of the given arrays. Therefore, the time taken by the code to execute is directly proportional to the number of elements in the array, which in this case is 6*6, i.e., 36 operations. Hence, the time complexities are O(n).

Therefore, the answer is 2.</s>