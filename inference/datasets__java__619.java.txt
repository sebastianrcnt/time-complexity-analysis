<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Dont {
  static BufferedReader jin = new BufferedReader(new InputStreamReader(System.in));
  static long n;
  static long x, y;

  public static void main(String[] args) throws Exception {
    n = nextLong();
    x = nextLong();
    y = nextLong();
    System.out.println((max(n - x, n - y) < max(x - 1, y - 1)) ? "Black" : "White");
  }

  static long max(long a, long b) {
    return (a > b) ? a : b;
  }

  static long nextLong() throws Exception {
    long res = 0;
    int ch = jin.read();
    while (ch < '0' || '9' < ch) ch = jin.read();
    while ('0' <= ch && ch <= '9') {
      res = res * 10 + ch - '0';
      ch = jin.read();
    }
    return res;
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

The time complexity of the given code is O(logn) because it uses the BufferedReader.nextLong() method to read integers from the input stream. The nextLong() method reads an integer from the input stream until it encounters a non-digit character or the end of the stream, which may take up to n (the value of n) operations, not counting the initial read operation to determine that n is present in the stream. So, each time nextLong() is called, it takes up to logn (logarithmic base n) operations to process.</s>