<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Codeforces {

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter pw = new PrintWriter(System.out);
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    StringTokenizer st = new StringTokenizer(br.readLine());
    for (int i = 0; i < n; i++) {
      arr[i] = Integer.parseInt(st.nextToken());
    }
    for (int i = 0; i < n; i++) {
      if (arr[i] % 2 == 0) {
        arr[i]--;
      }
    }
    for (int i = 0; i < n; i++) {
      pw.print(arr[i] + " ");
    }
    pw.flush();
    pw.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. This is because the code contains a loop that goes through the whole array once (n=number of elements). We have only one loop (for) which runs n times, in the worst case. Moreover, the operations inside of the loop are constant time operations, so the time taken for the execution is linear to the number of input.</s>