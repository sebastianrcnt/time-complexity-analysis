<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static void segregateElements(int arr[], int n) {

    int temp[] = new int[n];

    int j = 0;

    for (int i = 0; i < n; i++) if (arr[i] >= 0) temp[j++] = arr[i];

    if (j == n || j == 0) return;

    for (int i = 0; i < n; i++) if (arr[i] < 0) temp[j++] = arr[i];

    for (int i = 0; i < n; i++) arr[i] = temp[i];
  }

  public static void main(String arg[]) {

    int arr[] = {1, -1, -3, -2, 7, 5, 11, 6};

    int n = arr.length;

    segregateElements(arr, n);

    for (int i = 0; i < n; i++) System.out.print(arr[i] + " ");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice] which is O(n^2)

Explanation:

The segregateElements() method takes two for loops to first sort the positive elements and then sort the negative elements. The main method calls this function with an array size of n. Therefore, the overall time complexity of the given code is O(n^2).</s>