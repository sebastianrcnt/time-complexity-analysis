<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class GFG {

  static int getMinDiff(int arr[], int n, int k) {

    if (n == 1) return 0;

    Arrays.sort(arr);

    int ans = arr[n - 1] - arr[0];

    int small = arr[0] + k;

    int big = arr[n - 1] - k;

    int temp = 0;

    if (small > big) {

      temp = small;

      small = big;

      big = temp;
    }

    for (int i = 1; i < n - 1; i++) {

      int subtract = arr[i] - k;

      int add = arr[i] + k;

      if (subtract >= small || add <= big) continue;

      if (big - subtract <= add - small) small = subtract;
      else big = add;
    }

    return Math.min(ans, big - small);
  }

  public static void main(String[] args) {

    int arr[] = {4, 6};

    int n = arr.length;

    int k = 10;

    System.out.println("Maximum difference is " + getMinDiff(arr, n, k));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation:
The time complexity of the given code can be calculated as follows:

* The outermost loop runs from i=1 to i=n-1, which means that the number of iterations is n-1.
* For each iteration of the outer loop, the inner loop iteration is n-i-2, since the base case of k=0 will have all integers smaller than or equal to n-1.
* So, the total number of inner loop iterations is sum of (n-2), (n-3)..1, which is the harmonic series with n first terms and can be calculated as n(n+1)/2.
* Time complexity for finding minimum small and big values will be constant O(1) in each iteration.
* So, time complexity for the given code is O(n(n+1)/2), which is simplified to O(n^2).</s>