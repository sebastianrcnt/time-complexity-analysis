<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Main {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int a[] = new int[n];
    for (int i = 0; i < n; i++) a[i] = sc.nextInt();
    Arrays.sort(a);

    int t = 1, c = 0;
    for (int i = 1; i < n; i++) {
      if (a[i] == a[i - 1]) {
        if (i - 2 >= 0 && a[i - 2] == a[i - 1] - 1) {
          System.out.println("cslnb");
          return;
        }
        c++;
      }
      if (a[i] == a[i - 1] && a[i] == 0) {
        System.out.println("cslnb");
        return;
      }
    }
    if (c > 1) {
      System.out.println("cslnb");
      return;
    }
    for (int i = 0; i < n; i++) {
      if ((a[i] - i) % 2 != 0) t = t ^ 1;
    }
    if (t == 1) System.out.println("cslnb");
    else System.out.println("sjfnb");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the outer loop runs n times, and the inner loop runs n - 1 times. Hence, the total time taken for the entire loop is n * (n - 1) = O(n^2).</s>