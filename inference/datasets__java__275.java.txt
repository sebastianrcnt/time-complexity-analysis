<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.HashMap;

public class GFG {

  static void printMinIndexChar(String str, String patt) {

    HashMap<Character, Integer> hm = new HashMap<>();

    int minIndex = Integer.MAX_VALUE;

    int m = str.length();

    int n = patt.length();

    for (int i = 0; i < m; i++) if (!hm.containsKey(str.charAt(i))) hm.put(str.charAt(i), i);

    for (int i = 0; i < n; i++)
      if (hm.containsKey(patt.charAt(i)) && hm.get(patt.charAt(i)) < minIndex)
        minIndex = hm.get(patt.charAt(i));

    if (minIndex != Integer.MAX_VALUE)
      System.out.println("Minimum Index Character = " + str.charAt(minIndex));
    else System.out.println("No character present");
  }

  public static void main(String[] args) {

    String str = "geeksforgeeks";

    String patt = "set";

    printMinIndexChar(str, patt);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the HashMap is used to store the indices of the characters in the string. The iteration through the string is done in O(m) time, and the iteration through the pattern is done in O(n) time. Since there are two iterations, the overall time complexity is O(n+m) which simplifies to O(nlogn).</s>