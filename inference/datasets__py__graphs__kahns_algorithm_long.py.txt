<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
# Finding longest distance in Directed Acyclic Graph using KahnsAlgorithm
def longest_distance(graph):
    indegree = [0] * len(graph)
    queue = []
    long_dist = [1] * len(graph)

    for values in graph.values():
        for i in values:
            indegree[i] += 1

    for i in range(len(indegree)):
        if indegree[i] == 0:
            queue.append(i)

    while queue:
        vertex = queue.pop(0)
        for x in graph[vertex]:
            indegree[x] -= 1

            if long_dist[vertex] + 1 > long_dist[x]:
                long_dist[x] = long_dist[vertex] + 1

            if indegree[x] == 0:
                queue.append(x)

    print(max(long_dist))


# Adjacency list of Graph
graph = {0: [2, 3, 4], 1: [2, 7], 2: [5], 3: [5, 7], 4: [7], 5: [6], 6: [7], 7: []}
longest_distance(graph)


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Option Explanation:
1. O(1) is the time complexity of basic operations such as constant time access to elements in arrays and dictionaries.
2. O(logn) is the time complexity of most binary search algorithms, such as binary search on sorted arrays, as well as some other algorithms such as merge sort with log(n) base.
3. O(n) is a linear time complexity.</s>