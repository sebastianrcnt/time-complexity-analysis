<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
#include <iostream>
using namespace std;

#define V 4
#define INFINITY 99999

int graph[V][V] = {{0, 5, 1, 2}, {5, 0, 3, 3}, {1, 3, 0, 4}, {2, 3, 4, 0}};

struct mst {
    bool visited;
    int key;
    int near;
};

mst MST_Array[V];

void initilize() {
    for (int i = 0; i < V; i++) {
        MST_Array[i].visited = false;
        MST_Array[i].key = INFINITY;  // considering INFINITY as inifinity
        MST_Array[i].near = i;
    }

    MST_Array[0].key = 0;
}

void updateNear() {
    for (int v = 0; v < V; v++) {
        int min = INFINITY;
        int minIndex = 0;
        for (int i = 0; i < V; i++) {
            if (MST_Array[i].key < min && MST_Array[i].visited == false &&
                MST_Array[i].key != INFINITY) {
                min = MST_Array[i].key;
                minIndex = i;
            }
        }

        MST_Array[minIndex].visited = true;

        for (int i = 0; i < V; i++) {
            if (graph[minIndex][i] != 0 && graph[minIndex][i] < INFINITY) {
                if (graph[minIndex][i] < MST_Array[i].key) {
                    MST_Array[i].key = graph[minIndex][i];
                    MST_Array[i].near = minIndex;
                }
            }
        }
    }
}

void show() {
    for (int i = 0; i < V; i++) {
        cout << i << "  -  " << MST_Array[i].near << "\t"
             << graph[i][MST_Array[i].near] << "\n";
    }
}

int main() {
    initilize();
    updateNear();
    show();
    return 0;
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. The code takes O(n^2) time for both the initialization and update functions, so overall time complexity is O(n^2). The update function calls the initialization function as well causing the time to increase when it has the same algorithm as initialization.</s>