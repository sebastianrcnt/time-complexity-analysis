<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class Node {

  int data;

  Node left, right;

  public Node(int item) {

    data = item;

    left = right = null;
  }
}

class BinaryTree {

  static Node root;

  void printSpiral(Node node) {

    if (node == null) return;

    Stack<Node> s1 = new Stack<Node>();

    Stack<Node> s2 = new Stack<Node>();

    s1.push(node);

    while (!s1.empty() || !s2.empty()) {

      while (!s1.empty()) {

        Node temp = s1.peek();

        s1.pop();

        System.out.print(temp.data + " ");

        if (temp.right != null) s2.push(temp.right);

        if (temp.left != null) s2.push(temp.left);
      }

      while (!s2.empty()) {

        Node temp = s2.peek();

        s2.pop();

        System.out.print(temp.data + " ");

        if (temp.left != null) s1.push(temp.left);

        if (temp.right != null) s1.push(temp.right);
      }
    }
  }

  public static void main(String[] args) {

    BinaryTree tree = new BinaryTree();

    tree.root = new Node(1);

    tree.root.left = new Node(2);

    tree.root.right = new Node(3);

    tree.root.left.left = new Node(7);

    tree.root.left.right = new Node(6);

    tree.root.right.left = new Node(5);

    tree.root.right.right = new Node(4);

    System.out.println("Spiral Order traversal of Binary Tree is ");

    tree.printSpiral(root);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. The function call tree.printSpiral(root) has an out-degree of 2 and an in-degree of 1. That is, for every node in the bottom level, there have been two nodes pushed into the stack before (the parent node and a sibling of the parent node). Thus, the maximum number of stack operations that can be performed is equal to the height of the tree.</s>