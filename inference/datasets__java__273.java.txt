<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
public class GFG {

  static final int M = 26;

  static int getIdx(char ch) {

    return (ch - 'a');
  }

  static boolean allSame(int freq[], int N) {

    int same = 0;

    int i;

    for (i = 0; i < N; i++) {

      if (freq[i] > 0) {

        same = freq[i];

        break;
      }
    }

    for (int j = i + 1; j < N; j++) if (freq[j] > 0 && freq[j] != same) return false;

    return true;
  }

  static boolean possibleSameCharFreqByOneRemoval(String str) {

    int l = str.length();

    int[] freq = new int[M];

    for (int i = 0; i < l; i++) freq[getIdx(str.charAt(i))]++;

    if (allSame(freq, M)) return true;

    for (char c = 'a'; c <= 'z'; c++) {

      int i = getIdx(c);

      if (freq[i] > 0) {

        freq[i]--;

        if (allSame(freq, M)) return true;

        freq[i]++;
      }
    }

    return false;
  }

  public static void main(String args[]) {

    String str = "xyyzz";

    if (possibleSameCharFreqByOneRemoval(str)) System.out.println("Yes");
    else System.out.println("No");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation:
The time complexity of the function `getIdx(char ch)` is O(1) (a constant time operation), as it returns a fixed integer value based on the input character.

The time complexity of the function `allSame(int freq[], int N)` is O(n^2), where n is the length of the integer array `freq`. This is because the function iterates through the array `freq` twice, once to find the first occurrence of a non-zero element, and once to check if all non-zero elements are equal.

The time complexity of the function `possibleSameCharFreqByOneRemoval(String str)` is O(n^2), where n is the length of the input string `str`. This function calls `allSame(int freq[], int N)` function twice, hence its time complexity is O(n^2).</s>