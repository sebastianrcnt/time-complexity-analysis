<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class SequenceTransformation {
  void solve() {
    int p = 1, n = in.nextInt();
    while (n > 0) {
      if (n == 1) {
        out.print(p + " ");
        break;
      }
      if (n == 2) {
        out.print(p + " ");
        out.print(2 * p + " ");
        break;
      }
      if (n == 3) {
        out.print(p + " ");
        out.print(p + " ");
        out.print(3 * p + " ");
        break;
      }
      for (int i = 0; i < (n + 1) / 2; i++) {
        out.print(p + " ");
      }
      p *= 2;
      n /= 2;
    }
  }

  public static void main(String[] args) {
    in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));
    out = new PrintWriter(System.out);
    new SequenceTransformation().solve();
    out.close();
  }

  static FastScanner in;
  static PrintWriter out;

  static class FastScanner {
    BufferedReader in;
    StringTokenizer st;

    public FastScanner(BufferedReader in) {
      this.in = in;
    }

    public String nextToken() {
      while (st == null || !st.hasMoreTokens()) {
        try {
          st = new StringTokenizer(in.readLine());
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    public int nextInt() {
      return Integer.parseInt(nextToken());
    }

    public long nextLong() {
      return Long.parseLong(nextToken());
    }

    public double nextDouble() {
      return Double.parseDouble(nextToken());
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code uses a loop that runs n times and in each iteration of the loop, the while condition is checked which evaluates to true n-1 times. Therefore, the total number of iterations of the loop is n and hence the time complexity is O(n).</s>