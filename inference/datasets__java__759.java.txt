<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class java2 {
  public static void main(String[] args) {
    Scanner r = new Scanner(System.in);
    int n = r.nextInt();
    int[] l = new int[1005];
    int[] ri = new int[1005];
    int[] candy = new int[1005];
    for (int i = 1; i <= n; ++i) {
      l[i] = r.nextInt();
    }
    for (int i = 1; i <= n; ++i) {
      ri[i] = r.nextInt();
    }
    for (int i = 1; i <= n; ++i) {
      if (l[i] > i - 1 || ri[i] > n - i) {
        System.out.println("NO");
        System.exit(0);
      }
      candy[i] = n - l[i] - ri[i];
    }
    for (int i = 1; i <= n; ++i) {
      int left = 0, right = 0;
      for (int j = 1; j <= i - 1; ++j) {
        if (candy[j] > candy[i]) {
          ++left;
        }
      }
      for (int j = i + 1; j <= n; ++j) {
        if (candy[j] > candy[i]) {
          ++right;
        }
      }
      if (left != l[i] || right != ri[i]) {
        System.out.println("NO");
        System.exit(0);
      }
    }
    System.out.println("YES");
    for (int i = 1; i <= n; ++i) {
      System.out.print(candy[i] + " ");
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code loops for n times, and then again for n times in the inner loop and outer loop. Therefore, the time complexity is O(n^2).

In detail, the code loops `n` (the number of operations) times. Within each loop, it performs other operations on average of `n` elements. Therefore, the total number of operations performed is `n^2`. Overall, the time complexity is O(n^2).</s>