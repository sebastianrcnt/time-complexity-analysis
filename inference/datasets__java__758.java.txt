<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class FirstClass {

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter out = new PrintWriter(System.out);

    int n = Integer.parseInt(br.readLine());

    int arr[] = new int[n];

    StringTokenizer st1 = new StringTokenizer(br.readLine());

    for (int i = 0; i < n; i++) {
      arr[i] = Integer.parseInt(st1.nextToken());
    }

    int max = -1;
    boolean flag = true;

    for (int i = 0; i < n; i++) {
      if (arr[i] > max + 1) {
        flag = false;
        out.println(i + 1);
        break;
      } else {
        max = Math.max(max, arr[i]);
      }
    }

    if (flag) out.println(-1);

    out.flush();
    out.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2.[/choice]

Explanation:
The time complexity of the given code is O(n). This is because the code reads n integers from the standard input and performs a constant number of operations (assigning to an array and scanning the maximum element) for each input number. Therefore, the total time taken by the code is directly proportional to the number of input integers, which is O(n) in this case.</s>