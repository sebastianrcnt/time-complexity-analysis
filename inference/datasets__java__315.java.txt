<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

class LIS {

  static int CeilIndex(int A[], int l, int r, int key) {

    while (r - l > 1) {

      int m = l + (r - l) / 2;

      if (A[m] >= key) r = m;
      else l = m;
    }

    return r;
  }

  static int LongestIncreasingSubsequenceLength(int A[], int size) {

    int[] tailTable = new int[size];

    int len;

    tailTable[0] = A[0];

    len = 1;

    for (int i = 1; i < size; i++) {

      if (A[i] < tailTable[0]) tailTable[0] = A[i];
      else if (A[i] > tailTable[len - 1]) tailTable[len++] = A[i];
      else tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i];
    }

    return len;
  }

  public static void main(String[] args) {

    int A[] = {2, 5, 3, 7, 11, 8, 10, 13, 6};

    int n = A.length;

    System.out.println(
        "Length of Longest Increasing Subsequence is " + LongestIncreasingSubsequenceLength(A, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice] which is O(logn).</s>