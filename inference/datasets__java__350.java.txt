<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

class GFG {

  static int maxLoot(int hval[], int n) {

    if (n == 0) return 0;

    if (n == 1) return hval[0];

    if (n == 2) return Math.max(hval[0], hval[1]);

    int[] dp = new int[n];

    dp[0] = hval[0];

    dp[1] = Math.max(hval[0], hval[1]);

    for (int i = 2; i < n; i++) dp[i] = Math.max(hval[i] + dp[i - 2], dp[i - 1]);

    return dp[n - 1];
  }

  public static void main(String[] args) {

    int hval[] = {6, 7, 1, 3, 8, 2, 4};

    int n = hval.length;

    System.out.println("Maximum loot value : " + maxLoot(hval, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. This is because the code uses two nested loops to find the maximum value of the loot, where the outer loop iterates through the array of loot, and the inner loop checks the loot values. This results in O(n) time complexity, as the number of iterations of the outer loop increases linearly with the length of the input array.</s>