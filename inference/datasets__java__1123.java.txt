<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

public class coins {
  public static void main(String args[]) throws IOException {
    InputStreamReader read = new InputStreamReader(System.in);
    BufferedReader in = new BufferedReader(read);
    int i, k, n, v;
    String a;
    a = in.readLine();
    for (i = 0; i < a.length(); i++) {
      if (a.charAt(i) == ' ') break;
    }
    n = Integer.parseInt(a.substring(0, i));
    v = Integer.parseInt(a.substring(i + 1));
    k = v % n;
    v = v / n;
    if (k > 0) v++;
    System.out.println(v);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

Explanation:
The function performs some constant time operations at the beginning such as scanning the input with its length.
For each coin value, it performs at most 2 arithmetic operations (mod% and (/) division) and possibly an assignment operation (k=v%n, v=v/n, v++) which takes O(1) time on average.
The assignment operation is executed at most twice in the worst case scenario.
 
The number of operations is proportional to the number of coin values and log of n (since it does not perform the assignment operation in the loop for k<n) 
Thus the function is O(klogn)= O(nlogn) which is the second option.</s>