<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class GFG {

  static int findPlatform(int arr[], int dep[], int n) {

    Arrays.sort(arr);

    Arrays.sort(dep);

    int plat_needed = 1, result = 1;

    int i = 1, j = 0;

    while (i < n && j < n) {

      if (arr[i] <= dep[j]) {

        plat_needed++;

        i++;

        if (plat_needed > result) result = plat_needed;

      } else {

        plat_needed--;

        j++;
      }
    }

    return result;
  }

  public static void main(String[] args) {

    int arr[] = {900, 940, 950, 1100, 1500, 1800};

    int dep[] = {910, 1200, 1120, 1130, 1900, 2000};

    int n = arr.length;

    System.out.println("Minimum Number of Platforms Required = " + findPlatform(arr, dep, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. The code performs some constant operations, but it also depends on the input size 'n' for which it has to sort both arrays. Therefore, the time complexity of the code is O(n) (the sum of constant time and linear time operations).</s>