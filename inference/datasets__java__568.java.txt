<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Main {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    if (n == k) {
      String s = new String();
      for (int i = 0; i < k; i++) {
        s = s + "1";
      }
      System.out.println(s);
    } else {
      int a = (n - k) / 2;
      String s = new String();
      for (int i = 0; i < a && s.length() < n; i++) {
        s = s + "1";
      }
      if (s.length() < n) {
        s = s + "0";
      }
      while (s.length() < n) {
        s = s + s;
      }
      String s1 = new String();
      for (int i = 0; i < n; i++) {
        s1 = s1 + Character.toString(s.charAt(i));
      }
      System.out.println(s1);
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

Explanation:
The loop runs k times when n = k and 2 times when n != k. Additionally, there are a couple of other small loops that run logn, n, nlogn, and n times respectively, but compared to the outer loop, their time complexity is insignificant. Therefore, the time complexities dominate by the outer loop, making the overall time complexity of the program O(n).</s>