<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
public class GFG {

  static final int MAX_CHAR = 26;

  static int countSubstringWithEqualEnds(String s) {

    int result = 0;

    int n = s.length();

    int[] count = new int[MAX_CHAR];

    for (int i = 0; i < n; i++) count[s.charAt(i) - 'a']++;

    for (int i = 0; i < MAX_CHAR; i++) result += (count[i] * (count[i] + 1) / 2);

    return result;
  }

  public static void main(String args[]) {

    String s = "abcab";

    System.out.println(countSubstringWithEqualEnds(s));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. The reason being that the given code performs a single loop to iterate over the string and a linear array operation for counting the frequency of each character. Since the number of operations is directly proportional to the number of elements in the string, the time complexity is O(n).</s>