<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Main {
  private static final int MAX_SIZE = 100005;

  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int m = sc.nextInt();
    int a = sc.nextInt();
    int b = sc.nextInt();
    if (((m + 1) / 60 < a) || ((m + 1) / 60 == a && (m + 1) % 60 <= b)) {
      out(0, 0);
      System.exit(0);
    }
    for (int i = 2; i <= n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();

      int bb = b + 2 * m + 2;
      int aa = a + bb / 60;
      bb %= 60;

      if ((aa < x) || (aa == x && bb <= y)) {
        b = b + m + 1;
        a = a + b / 60;
        b %= 60;
        out(a, b);
        System.exit(0);
      }
      a = x;
      b = y;
    }
    b = b + m + 1;
    a = a + b / 60;
    b = b % 60;
    out(a, b);
  }

  private static void out(int a, int b) {
    cout(a);
    cout(" ");
    cout(b);
  }

  private static void cout(Object a) {
    System.out.print(a);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation:
The main loop iterates from 2 to n. Inside the loop, two integer operations are performed for each iteration. Therefore, the total number of integer operations will be equal to 2 * n, which is linear in the size of the input.

Hence, the time complexity of the given code is O(n).</s>