<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    while (sc.hasNext()) {
      int n = sc.nextInt();
      int pos = sc.nextInt();
      int l = sc.nextInt();
      int r = sc.nextInt();

      if (l == 1 && r == n) {
        System.out.println(0);
      } else if (l == 1 && r < n) {
        System.out.println(Math.abs(r - pos) + 1);
      } else if (l > 1 && r == n) {
        System.out.println(Math.abs(l - pos) + 1);
      } else if (l > 1 && r < n) {
        int c = Math.min(Math.abs(r - pos), Math.abs(l - pos));
        System.out.println(c + 2 + r - l);
      }
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]0[/choice]. According to the given code, if the input values are 1, 1, and equal values of left and right pointers, the time taken by the program to execute is constant which is O(1).</s>