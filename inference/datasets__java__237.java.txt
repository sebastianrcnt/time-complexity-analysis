<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class solution {

  static void printFirstNegativeInteger(int arr[], int n, int k) {

    boolean flag;

    for (int i = 0; i < (n - k + 1); i++) {

      flag = false;

      for (int j = 0; j < k; j++) {

        if (arr[i + j] < 0) {

          System.out.print((arr[i + j]) + " ");

          flag = true;

          break;
        }
      }

      if (!flag) System.out.print("0" + " ");
    }
  }

  public static void main(String args[]) {

    int arr[] = {12, -1, -7, 8, -15, 30, 16, 28};

    int n = arr.length;

    int k = 3;

    printFirstNegativeInteger(arr, n, k);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code uses a for loop which runs from 0 to n-k+1, meaning the for loop ran 7 times. Also, the nested for loop runs k times each iteration of the outer for loop, resulting in 21 iterations in total. Therefore, the total time complexity of the code is O(7 Ã— 21), which simplifies to O(147).</s>