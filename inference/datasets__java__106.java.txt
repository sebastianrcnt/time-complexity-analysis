<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

class PairSum {

  static void constructArr(int arr[], int pair[], int n) {

    arr[0] = (pair[0] + pair[1] - pair[n - 1]) / 2;

    for (int i = 1; i < n; i++) arr[i] = pair[i - 1] - arr[0];
  }

  public static void main(String[] args) {

    int pair[] = {15, 13, 11, 10, 12, 10, 9, 8, 7, 5};

    int n = 5;

    int[] arr = new int[n];

    constructArr(arr, pair, n);

    for (int i = 0; i < n; i++) System.out.print(arr[i] + " ");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because there are n loops in the code, where n is the length of the input array. Specifically, the for loop in the main method runs n times, and the for loop in the constructArr method also runs n times. Therefore, the total number of iterations is n^2, which corresponds to O(n^2) time complexity.</s>