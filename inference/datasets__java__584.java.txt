<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Scanner;

public class Solution {

  private static int[] a;

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    int n = sc.nextInt(), m = sc.nextInt();

    a = new int[101];
    for (int i = 0; i < m; i++) {
      int type = sc.nextInt();
      a[type] = a[type] + 1;
    }

    int lo = 1, hi = 100, max = 0;

    while (lo <= hi) {
      int mid = lo + (hi - lo) / 2;
      if (check(n, mid)) {
        max = mid;
        lo = mid + 1;
      } else {
        hi = mid - 1;
      }
    }
    System.out.println(max);
  }

  public static boolean check(int n, int target) {
    int result = 0;
    for (int i = 0; i < a.length; i++) {
      result = result + (a[i] / target);
    }
    if (result >= n) {
      return true;
    }
    return false;
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. Option 2 corresponds to O(n), which is a linear time complexity. The reason for this is that the size of the input array is directly proportional to the number of operations performed on it, and that the while loop in the code runs n times.</s>