<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
public class GFG {

  static boolean checkEquality(String s) {

    return (s.charAt(0) == s.charAt(s.length() - 1));
  }

  static int countSubstringWithEqualEnds(String s) {

    int result = 0;

    int n = s.length();

    for (int i = 0; i < n; i++)
      for (int len = 1; len <= n - i; len++) if (checkEquality(s.substring(i, i + len))) result++;

    return result;
  }

  public static void main(String args[]) {

    String s = "abcab";

    System.out.println(countSubstringWithEqualEnds(s));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. This is because the code has three nested loops, with the outermost loop iterating over the characters in the input string. The middle loop also iterates over substrings of the input string of length n-i. The inner loop checks if the first and last characters of the substring are the same, which takes constant time O(1) for each comparison. Therefore, the time complexity of the code is O(n\*1\*1) which further simplifies to O(n).</s>