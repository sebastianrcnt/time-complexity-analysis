<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.awt.*;
import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    long n = scanner.nextLong();
    long x = scanner.nextLong(), y = scanner.nextLong();
    long whiteSteps, blackSteps;

    if (x == 1 || y == 1) {
      whiteSteps = (x - 1) + (y - 1);
    } else {
      whiteSteps = Math.min((x - 1) + Math.abs(y - x), (y - 1) + Math.abs(y - x));
    }

    if (x == n || y == n) {
      blackSteps = (n - x) + (n - y);
    } else {
      blackSteps = Math.min((n - x) + Math.abs(y - x), (n - y) + Math.abs(y - x));
    }

    if (whiteSteps <= blackSteps) {
      System.out.println("White");
    } else {
      System.out.println("Black");
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. This is because the code uses a logarithmic function to calculate the values of the variables "whiteSteps" and "blackSteps". Specifically, the code uses the Math.min() function which has a time complexity of O(logn) because it divides the input size n by the maximum value of the two elements passed to it.</s>