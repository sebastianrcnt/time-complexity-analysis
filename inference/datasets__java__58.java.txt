<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static int k = 16;

  static int N = 100000;

  static long table[][] = new long[N][k + 1];

  static void buildSparseTable(int arr[], int n) {

    for (int i = 0; i < n; i++) table[i][0] = arr[i];

    for (int j = 1; j <= k; j++)
      for (int i = 0; i <= n - (1 << j); i++)
        table[i][j] = table[i][j - 1] + table[i + (1 << (j - 1))][j - 1];
  }

  static long query(int L, int R) {

    long answer = 0;

    for (int j = k; j >= 0; j--) {

      if (L + (1 << j) - 1 <= R) {

        answer = answer + table[L][j];

        L += 1 << j;
      }
    }

    return answer;
  }

  public static void main(String args[]) {

    int arr[] = {3, 7, 2, 5, 8, 9};

    int n = arr.length;

    buildSparseTable(arr, n);

    System.out.println(query(0, 5));

    System.out.println(query(3, 5));

    System.out.println(query(2, 4));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. The code has two nested loops that iterate from 0 to k and from i = 0 to n - (1 << j), respectively. Therefore, the total time complexity of the given code is O(nklogk).</s>