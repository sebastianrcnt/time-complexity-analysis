<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.*;
import java.util.*;

public class Main {

  public static void main(String[] args) throws IOException {
    FastReader in = new FastReader(System.in);
    PrintWriter out = new PrintWriter(System.out);
    long n = in.nextLong();
    long k = in.nextLong();
    long s = in.nextLong();
    if (k > s || k * (n - 1) < s) {
      out.println("NO");
    } else {
      out.println("YES");
      long cur = 1;
      while (k > 0) {
        long x = Math.min(n - 1, s - k + 1);
        cur = (cur - x > 0 ? cur - x : cur + x);
        out.print(cur + " ");
        s -= x;
        k--;
      }
    }
    out.flush();
    out.close();
  }

  static class FastReader {
    StringTokenizer st;
    BufferedReader br;

    public FastReader(InputStream s) {
      br = new BufferedReader(new InputStreamReader(s));
    }

    public FastReader(FileReader fileReader) {
      br = new BufferedReader(fileReader);
    }

    public String next() throws IOException {
      while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
      return st.nextToken();
    }

    public int nextInt() throws IOException {
      return Integer.parseInt(next());
    }

    public double nextDouble() throws IOException {
      return Double.parseDouble(next());
    }

    public long nextLong() throws IOException {
      return Long.parseLong(next());
    }

    public String nextLine() throws IOException {
      return br.readLine();
    }

    public boolean ready() throws IOException {
      return br.ready();
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].

Explanation:
The given code is using a two pointer approach, which involves two variables that move over a sequence with a certain order. The time complexity of the code is determined by the fact that the inner loop takes O(n) time. The outer loop does not have a fixed number of iterations, and it is driven by the inner loop, which results in the given time complexity of O(n^2).</s>