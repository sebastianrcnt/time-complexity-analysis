<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static int findRepeating(int arr[], int n) {

    int res = 0;

    for (int i = 0; i < n - 1; i++) res = res ^ (i + 1) ^ arr[i];

    res = res ^ arr[n - 1];

    return res;
  }

  public static void main(String[] args) {

    int arr[] = {9, 8, 2, 6, 1, 8, 5, 3, 4, 7};

    int n = arr.length;

    System.out.println(findRepeating(arr, n));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].
It has a runtime of O(n^2) which occurs because the code performs a loop that runs n times and within that loop it performs another loop that also iterates n times. The inner loop is also performing a bitwise OR operation on n-1 elements at each iteration which is O(n). The amount of iterations that the inner loop performs scales with n, which gives us a total time complexity of O(n*n) or O(n^2).</s>