<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.Arrays;

public class Main {
  static StreamTokenizer st =
      new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

  public static void main(String[] args) {
    int n = nextInt();
    int m = nextInt();
    long b[] = new long[n];
    long g[] = new long[m];
    for (int i = 0; i < n; i++) b[i] = nextInt();
    for (int i = 0; i < m; i++) g[i] = nextInt();
    Arrays.sort(b);
    Arrays.sort(g);
    if (b[n - 1] > g[0]) System.out.println("-1");
    else if (b[n - 1] == g[0]) {
      long sum = 0;
      for (int i = 0; i < m; i++) sum += g[i];
      for (int i = 0; i < n - 1; i++) {
        sum += (m * b[i]);
      }
      System.out.println(sum);
    } else {
      long sum = 0;
      for (int i = 0; i < m; i++) sum += g[i];
      sum += b[n - 1];
      sum += (b[n - 2] * (m - 1));
      for (int i = 0; i < n - 2; i++) {
        sum += (m * b[i]);
      }
      System.out.println(sum);
    }
  }

  static int nextInt() {
    try {
      st.nextToken();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return (int) st.nval;
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice].

Explanation:
The main method reads the input which takes O(logn) time due to the use of StreamTokenizer. In the variable declarations, O(n) and O(m) space is being used to store the arrays b and g respectively. 
After sorting the arrays, we compare them which takes constant time. If they are equal, we calculate the sum of g[] which takes O(m) time. 
If b[n-1] < g[0], we calculate the sum of g[] and b[n-1], b[n-2] * (m-1) and then sum of b[] from i=0 to i=n-2 which takes O(n^2) time.

Therefore, the overall time complexity of the given code is O(n^2).</s>