<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Stack;

public class GFG {

  static Stack<Integer> st = new Stack<>();

  static void push_digits(int number) {

    while (number != 0) {

      st.push(number % 10);

      number = number / 10;
    }
  }

  static int reverse_number(int number) {

    push_digits(number);

    int reverse = 0;

    int i = 1;

    while (!st.isEmpty()) {

      reverse = reverse + (st.peek() * i);

      st.pop();

      i = i * 10;
    }

    return reverse;
  }

  public static void main(String[] args) {

    int number = 39997;

    System.out.println(reverse_number(number));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice] which is O(n^2).

The reason for this time complexity is that the code uses two nested loops, one in the `push_digits()` method and another in the `reverse_number()` method. The `push_digits()` method has a time complexity of O(n) as it iterates through the digits of the number, and the inner loop in the `reverse_number()` method has a time complexity of O(n) as well. Since the outer loop in the `reverse_number()` method has n iterations, the whole method has a time complexity of O(n * n) which is O(n^2).</s>