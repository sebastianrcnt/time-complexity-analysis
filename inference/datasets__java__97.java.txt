<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class FindUnion {

  static int printUnion(int arr1[], int arr2[], int m, int n) {

    int i = 0, j = 0;

    while (i < m && j < n) {

      if (arr1[i] < arr2[j]) System.out.print(arr1[i++] + " ");
      else if (arr2[j] < arr1[i]) System.out.print(arr2[j++] + " ");
      else {

        System.out.print(arr2[j++] + " ");

        i++;
      }
    }

    while (i < m) System.out.print(arr1[i++] + " ");

    while (j < n) System.out.print(arr2[j++] + " ");

    return 0;
  }

  public static void main(String args[]) {

    int arr1[] = {1, 2, 4, 5, 6};

    int arr2[] = {2, 3, 5, 7};

    int m = arr1.length;

    int n = arr2.length;

    printUnion(arr1, arr2, m, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the while loop is running n times in all, and the length of the array is n in the worst case. Therefore, the time complexity is O(n).</s>