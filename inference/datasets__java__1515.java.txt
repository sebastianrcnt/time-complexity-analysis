<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
public class Search {

  public static boolean find2(int[] array, int begin, int end, int element) {
    if (begin <= end) {
      int medium = begin + (end - begin) / 2;
      if (array[medium] == element) return true;
      else if (medium > begin && array[medium - 1] == element) return true;
      else if (medium < end && array[medium + 1] == element) return true;

      if (array[medium] > element) return find2(array, 0, medium - 2, element);
      return find2(array, medium + 2, end, element);
    }
    return false;
  }

  public static int find(int[] array, int begin, int end, int element) {
    if (begin < end) {
      int medium = begin + (end - begin) / 2;
      if (array[medium] == element) return medium;
      else if (medium > begin && array[medium - 1] == element) return medium - 1;
      else if (medium < end && array[medium + 1] == element) return medium + 1;

      if (array[medium] > element) return find(array, 0, medium - 2, element);
      return find(array, medium + 2, end, element);
    }
    return -1;
  }

  public static void main(String[] args) {
    int[] array = {12, 13, 21, 36, 3, 43, 65, 76, 88, 91, 100};
    System.out.println(find2(array, 0, array.length - 1, 13));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].</s>