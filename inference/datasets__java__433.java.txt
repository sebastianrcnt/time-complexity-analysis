<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GfG {

  static class Node {

    int data;

    Node left, right;
  }

  static Node newNode(int item) {

    Node temp = new Node();

    temp.data = item;

    temp.left = null;

    temp.right = null;

    return temp;
  }

  static int getLevel(Node root, Node node, int level) {

    if (root == null) return 0;

    if (root == node) return level;

    int downlevel = getLevel(root.left, node, level + 1);

    if (downlevel != 0) return downlevel;

    return getLevel(root.right, node, level + 1);
  }

  static void printGivenLevel(Node root, Node node, int level) {

    if (root == null || level < 2) return;

    if (level == 2) {

      if (root.left == node || root.right == node) return;

      if (root.left != null) System.out.print(root.left.data + " ");

      if (root.right != null) System.out.print(root.right.data + " ");

    } else if (level > 2) {

      printGivenLevel(root.left, node, level - 1);

      printGivenLevel(root.right, node, level - 1);
    }
  }

  static void printCousins(Node root, Node node) {

    int level = getLevel(root, node, 1);

    printGivenLevel(root, node, level);
  }

  public static void main(String[] args) {

    Node root = newNode(1);

    root.left = newNode(2);

    root.right = newNode(3);

    root.left.left = newNode(4);

    root.left.right = newNode(5);

    root.left.right.right = newNode(15);

    root.right.left = newNode(6);

    root.right.right = newNode(7);

    root.right.left.right = newNode(8);

    printCousins(root, root.left.right);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

Explanation:
The function `getLevel` is a recursive function that takes in a root node, a target node, and the current level of the tree. It returns the level at which the target node exists in the tree, or 0 if the target node does not exist in the tree. The time complexity of this function is O(logn) because each recursive call increases the level by 1 and the maximum depth of the tree is log n.

The function `printCousins` calls the `getLevel` function and then prints the nodes at the same level as the target node. It is called once and takes constant time to execute.

The function `printGivenLevel` is a recursive function that takes in a root node, a level to print, and a target node. It prints the nodes at the current level and the next level. The time complexity of this function is O(nlogn) because each recursive call decreases the height of the subtree from n to n-1, but increases the width of the subtree by log n.

The main function creates the tree and calls the `printCousins` function with the root and the target node. The time complexity of this function is O(1) because it is called once and executes in constant time. Therefore, the overall time complexity of the given code is [choice]1[/choice].</s>