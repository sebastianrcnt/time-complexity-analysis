<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import static java.lang.Math.*;

import java.io.*;
import java.util.*;

public class SolutionB {

  public static void main(String args[]) throws IOException {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    Set<Integer> set1 = new HashSet<Integer>();
    Set<Integer> set2 = new HashSet<Integer>();
    int a[] = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = sc.nextInt();
      if (!set1.contains(a[i])) {
        set1.add(a[i]);
      } else {
        System.out.println(0);
        return;
      }
    }
    for (int i = 0; i < n; i++) {
      int b = a[i] & k;
      if (b != a[i] && set1.contains(b)) {
        System.out.println(1);
        return;
      }
    }
    for (int i = 0; i < n; i++) {
      int b = a[i] & k;
      if (b != a[i] && set2.contains(b)) {
        System.out.println(2);
        return;
      } else {
        set2.add(b);
      }
    }
    System.out.println(-1);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].


Explanation:
In this code, there are two nested `for` loops - one of these loops runs `n` times and the other one runs `n` times as well. 

In the first loop, we iterate over each element `a[i]` for `n` times.
 - This is a constant-time operation (O(1)), as each iteration adds a new element to a set.

The second loop iterates over each element `a[i]` `n` times.
 - In the first iteration of this loop, we calculate `b = a[i] & k`. This takes constant time (O(1)), as the bitwise `&` operation is an atomic operation.
 - Then we check if `b` is already in the sets `set1` and `set2` using the `contains()` method.
 - This also takes constant time (O(1)) for both sets.

If `b` is found in either `set1` or `set2`, we immediately return the respective output.
 - So we have checked `n` elements with constant time (O(1)) operations per check, which gives us an overall time complexity of `n`.</s>