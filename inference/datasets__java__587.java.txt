<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Solution {

  static class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String str = "";
      try {
        str = br.readLine();
      } catch (IOException e) {
        e.printStackTrace();
      }
      return str;
    }
  }

  public static void main(String args[]) {

    FastReader sc = new FastReader();
    int n = sc.nextInt();
    int m = sc.nextInt();
    int[] arr = new int[105];

    for (int i = 0; i < m; i++) {
      int a = sc.nextInt();
      arr[a]++;
    }

    for (int i = 1; i <= 1000; i++) {
      int sum = 0;

      for (int a : arr) {
        if (a != 0) {
          sum += (a / i);
        }
      }

      if (sum < n) {
        System.out.println(i - 1);
        return;
      }
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4. 

The code has a nested loop with a outer loop iterating n times and an inner loop iterating n times, since arr[] has 105 elements at the maximum. As a result, the time complexity of the code is O(n^2) which is choice 4.</s>