<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.Arrays;

class GFG {

  static void findTriplets(int arr[], int n) {

    boolean found = false;

    Arrays.sort(arr);

    for (int i = 0; i < n - 1; i++) {

      int l = i + 1;

      int r = n - 1;

      int x = arr[i];

      while (l < r) {

        if (x + arr[l] + arr[r] == 0) {

          System.out.print(x + " ");

          System.out.print(arr[l] + " ");

          System.out.println(arr[r] + " ");

          l++;

          r--;

          found = true;

        } else if (x + arr[l] + arr[r] < 0) l++;
        else r--;
      }
    }

    if (found == false) System.out.println(" No Triplet Found");
  }

  public static void main(String[] args) {

    int arr[] = {
      0, -1,
      2, -3,
      1
    };

    int n = arr.length;

    findTriplets(arr, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. As we can see that, the outer nested loop runs n-1 times and so the total time complexity will be O(n-1) or O(n). But we don't have enough information to determine which one is actually the time complexity of this given code.</s>