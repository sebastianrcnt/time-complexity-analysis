<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    HashMap<Integer, Integer> map = new HashMap<>();
    StringTokenizer st = new StringTokenizer(br.readLine());
    for (int i = 0; i < n; i++) {
      int x = Integer.parseInt(st.nextToken());
      arr[i] = x;
      if (!map.containsKey(x)) {
        map.put(x, 1);
      } else {
        map.replace(x, map.get(x) + 1);
      }
    }
    int[] power = new int[31];
    for (int i = 0; i < 31; i++) {
      power[i] = 1 << i;
    }
    int c = 0;
    for (int i = 0; i < n; i++) {
      boolean f = false;
      for (int j = 0; j <= 30; j++) {
        int check = power[j] - arr[i];
        if ((map.containsKey(check) && check != arr[i])) {
          f = true;
          break;
        }
        if ((map.containsKey(check) && check == arr[i] && map.get(check) >= 2)) {
          f = true;
          break;
        }
      }
      if (!f) {
        c++;
      }
    }
    System.out.println(c);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4.[/choice] O(n^2).</s>