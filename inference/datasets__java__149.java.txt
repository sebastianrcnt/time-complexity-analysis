<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import static java.lang.Math.max;

class GFG {

  public static int N = 4, M = 6;

  static int findMaxPath(int mat[][]) {

    int res = -1;

    for (int i = 0; i < M; i++) res = max(res, mat[0][i]);

    for (int i = 1; i < N; i++) {

      res = -1;

      for (int j = 0; j < M; j++) {

        if (j > 0 && j < M - 1)
          mat[i][j] += max(mat[i - 1][j], max(mat[i - 1][j - 1], mat[i - 1][j + 1]));
        else if (j > 0) mat[i][j] += max(mat[i - 1][j], mat[i - 1][j - 1]);
        else if (j < M - 1) mat[i][j] += max(mat[i - 1][j], mat[i - 1][j + 1]);

        res = max(mat[i][j], res);
      }
    }

    return res;
  }

  public static void main(String[] args) {

    int mat[][] = {
      {10, 10, 2, 0, 20, 4}, {1, 0, 0, 30, 2, 5}, {0, 10, 4, 0, 2, 0}, {1, 0, 2, 20, 0, 4}
    };

    System.out.println(findMaxPath(mat));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2.[/choice]</s>