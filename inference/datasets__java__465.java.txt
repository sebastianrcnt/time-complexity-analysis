<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

class MST {

  private static final int V = 5;

  int minKey(int key[], Boolean mstSet[]) {

    int min = Integer.MAX_VALUE, min_index = -1;

    for (int v = 0; v < V; v++)
      if (mstSet[v] == false && key[v] < min) {

        min = key[v];

        min_index = v;
      }

    return min_index;
  }

  void printMST(int parent[], int graph[][]) {

    System.out.println("Edge \tWeight");

    for (int i = 1; i < V; i++)
      System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
  }

  void primMST(int graph[][]) {

    int parent[] = new int[V];

    int key[] = new int[V];

    Boolean mstSet[] = new Boolean[V];

    for (int i = 0; i < V; i++) {

      key[i] = Integer.MAX_VALUE;

      mstSet[i] = false;
    }

    key[0] = 0;

    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {

      int u = minKey(key, mstSet);

      mstSet[u] = true;

      for (int v = 0; v < V; v++)
        if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) {

          parent[v] = u;

          key[v] = graph[u][v];
        }
    }

    printMST(parent, graph);
  }

  public static void main(String[] args) {

    MST t = new MST();

    int graph[][] =
        new int[][] {
          {0, 2, 0, 6, 0}, {2, 0, 3, 8, 5}, {0, 3, 0, 0, 7}, {6, 8, 0, 0, 9}, {0, 5, 7, 9, 0}
        };

    t.primMST(graph);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. The loop runs n times, and within the loop, another loop runs n times in the worst case, making it O(n^2) time complexity.</s>