<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class code {
  public static void main(String[] args) throws IOException {
    Scanner sc = new Scanner(System.in);
    PrintWriter out = new PrintWriter(System.out);
    int ok, ok2;
    int va, vb;
    va = 0;
    vb = 0;
    out.println("? " + va + " " + vb);
    out.flush();
    ok = sc.nextInt();
    for (int i = 29; i >= 0; i--) {
      if (ok == 0) {
        va += (1 << i);
        out.println("? " + va + " " + vb);
        out.flush();
        ok2 = sc.nextInt();
        if (ok2 == 1) {
          va -= (1 << i);
        } else {
          vb += (1 << i);
        }
      } else {
        va += (1 << i);
        vb += (1 << i);
        out.println("? " + va + " " + vb);
        out.flush();
        ok2 = sc.nextInt();
        if (ok == ok2) {
          vb -= (1 << i);
          out.println("? " + va + " " + vb);
          out.flush();
          ok2 = sc.nextInt();
          if (ok2 == 1) {
            va -= (1 << i);
          } else {
            vb += (1 << i);
          }
        } else {
          if (ok == 1) {
            vb -= (1 << i);
            out.println("? " + va + " " + vb);
            out.flush();
            ok = sc.nextInt();
          } else {
            va -= (1 << i);
            out.println("? " + va + " " + vb);
            out.flush();
            ok = sc.nextInt();
          }
        }
      }
    }
    out.println("! " + va + " " + vb);
    out.flush();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

Explanation: 
We can see that the most number of operations are performed in the for loop, where we have two branches of if-else statements. 
The time complexity of that loop would be O(logn) where n is the maximum value of i, which is 29. 
As the loop only runs once, the overall time complexity of the given code is O(logn).

The other options do not apply in this scenario as the given code does not involve any operations other than a single loop.</s>