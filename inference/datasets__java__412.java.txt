<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class Node {

  char data;

  Node left, right;

  public Node(char item) {

    data = item;

    left = null;

    right = null;
  }
}

class BinaryTree {

  Node convertExpression(char[] expression, int i) {

    if (i >= expression.length) return null;

    Node root = new Node(expression[i]);

    ++i;

    if (i < expression.length && expression[i] == '?')
      root.left = convertExpression(expression, i + 1);
    else if (i < expression.length) root.right = convertExpression(expression, i + 1);

    return root;
  }

  public void printTree(Node root) {

    if (root == null) return;

    System.out.print(root.data + " ");

    printTree(root.left);

    printTree(root.right);
  }

  public static void main(String args[]) {

    String exp = "a?b?c:d:e";

    BinaryTree tree = new BinaryTree();

    char[] expression = exp.toCharArray();

    Node root = tree.convertExpression(expression, 0);

    tree.printTree(root);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice](O(n^2)). This is because there is a recursive conversion of the given expression into a binary tree which may end up with n^2 calls to the recursive method. The number of operations required to evaluate the expression can grow up to n^2 in the worst case.</s>