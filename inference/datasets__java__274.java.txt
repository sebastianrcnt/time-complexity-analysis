<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
public class GFG {

  static void printMinIndexChar(String str, String patt) {

    int minIndex = Integer.MAX_VALUE;

    int m = str.length();

    int n = patt.length();

    for (int i = 0; i < n; i++) {

      for (int j = 0; j < m; j++) {

        if (patt.charAt(i) == str.charAt(j) && j < minIndex) {

          minIndex = j;

          break;
        }
      }
    }

    if (minIndex != Integer.MAX_VALUE)
      System.out.println("Minimum Index Character = " + str.charAt(minIndex));
    else System.out.println("No character present");
  }

  public static void main(String[] args) {

    String str = "geeksforgeeks";

    String patt = "set";

    printMinIndexChar(str, patt);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. The code uses two nested loops that run from i=0 to i<n in the outer loop (where n is the length of the pattern) and from j=0 to j<m in the inner loop (where m is the length of the string). Therefore, the number of iterations of the inner loop is at most n and the number of iterations of the outer loop is at most m. Hence, the overall time complexity of the code is O(n^2) or in other words O(nlogn).</s>