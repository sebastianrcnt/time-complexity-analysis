<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static void minimizeWithKSwaps(int arr[], int n, int k) {

    for (int i = 0; i < n - 1 && k > 0; ++i) {

      int pos = i;

      for (int j = i + 1; j < n; ++j) {

        if (j - i > k) break;

        if (arr[j] < arr[pos]) pos = j;
      }

      int temp;

      for (int j = pos; j > i; --j) {

        temp = arr[j];

        arr[j] = arr[j - 1];

        arr[j - 1] = temp;
      }

      k -= pos - i;
    }
  }

  public static void main(String[] args) {

    int arr[] = {7, 6, 9, 2, 1};

    int n = arr.length;

    int k = 3;

    minimizeWithKSwaps(arr, n, k);

    for (int i = 0; i < n; ++i) System.out.print(arr[i] + " ");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. The reason being, the inner loop (for j = i + 1; j < n; ++j) runs n-1 times, and the j-i+1 times on the first iteration. So, the total time taken is O(n-1+(n-1-1)) = O(n^2).</s>