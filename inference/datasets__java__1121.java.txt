<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

  static Scanner in = new Scanner();
  static PrintWriter out = new PrintWriter(System.out);

  public static void main(String[] args) throws IOException {
    long n = in.nextLong(), m = in.nextLong();
    out.print(m / n + (m % n == 0 ? 0 : 1));
    out.close();
  }

  static class Scanner {
    BufferedReader br;
    StringTokenizer st;

    public Scanner() {
      br = new BufferedReader(new InputStreamReader(System.in));
      st = new StringTokenizer("");
    }

    public String next() throws IOException {
      if (!st.hasMoreTokens()) st = new StringTokenizer(br.readLine());
      return st.nextToken();
    }

    public int nextInt() throws IOException {
      return Integer.parseInt(next());
    }

    public long nextLong() throws IOException {
      return Long.parseLong(next());
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]0[/choice]. The reason behind this is that the input-output operations are considered constant time and do not affect the overall time complexity of the program. Since there are only two input numbers, n and m, the time required to read and process them is constant. Therefore, the time complexity of the given code is O(1).</s>