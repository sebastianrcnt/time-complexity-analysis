<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class GFG {

  static final int N = 3;

  static int getMin(int arr[]) {

    int minInd = 0;

    for (int i = 1; i < N; i++) if (arr[i] < arr[minInd]) minInd = i;

    return minInd;
  }

  static int getMax(int arr[]) {

    int maxInd = 0;

    for (int i = 1; i < N; i++) if (arr[i] > arr[maxInd]) maxInd = i;

    return maxInd;
  }

  static int minOf2(int x, int y) {

    return (x < y) ? x : y;
  }

  static void minCashFlowRec(int amount[]) {

    int mxCredit = getMax(amount), mxDebit = getMin(amount);

    if (amount[mxCredit] == 0 && amount[mxDebit] == 0) return;

    int min = minOf2(-amount[mxDebit], amount[mxCredit]);

    amount[mxCredit] -= min;

    amount[mxDebit] += min;

    System.out.println("Person " + mxDebit + " pays " + min + " to " + "Person " + mxCredit);

    minCashFlowRec(amount);
  }

  static void minCashFlow(int graph[][]) {

    int amount[] = new int[N];

    for (int p = 0; p < N; p++)
      for (int i = 0; i < N; i++) amount[p] += (graph[i][p] - graph[p][i]);

    minCashFlowRec(amount);
  }

  public static void main(String[] args) {

    int graph[][] = {
      {0, 1000, 2000}, {0, 0, 5000}, {0, 0, 0},
    };

    minCashFlow(graph);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice] or O(n^2) because the `minCashFlowRec` function is making a recursive call for each element of the input array. The time complexity of the `minOf2` function is O(1), but since it is called multiple times with different inputs, it is taking O(n) time overall. Therefore, the total time complexity of the program is O(n * n) = O(n^2).</s>