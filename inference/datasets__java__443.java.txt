<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class Solution {

  static class NodeDetails {

    int data;

    int min, max;
  }
  ;

  static boolean levelOrderIsOfBST(int arr[], int n) {

    if (n == 0) return true;

    Queue<NodeDetails> q = new LinkedList<NodeDetails>();

    int i = 0;

    NodeDetails newNode = new NodeDetails();

    newNode.data = arr[i++];

    newNode.min = Integer.MIN_VALUE;

    newNode.max = Integer.MAX_VALUE;

    q.add(newNode);

    while (i != n && q.size() > 0) {

      NodeDetails temp = q.peek();

      q.remove();

      newNode = new NodeDetails();

      if (i < n && (arr[i] < (int) temp.data && arr[i] > (int) temp.min)) {

        newNode.data = arr[i++];

        newNode.min = temp.min;

        newNode.max = temp.data;

        q.add(newNode);
      }

      newNode = new NodeDetails();

      if (i < n && (arr[i] > (int) temp.data && arr[i] < (int) temp.max)) {

        newNode.data = arr[i++];

        newNode.min = temp.data;

        newNode.max = temp.max;

        q.add(newNode);
      }
    }

    if (i == n) return true;

    return false;
  }

  public static void main(String args[]) {

    int arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10};

    int n = arr.length;

    if (levelOrderIsOfBST(arr, n)) System.out.print("Yes");
    else System.out.print("No");
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. The reason behind this choice is that the code first checks if the length of the input array is 0, and if it's not, it initializes a queue with the first element of the array, thus having a worst-case time complexity of O(1).</s>