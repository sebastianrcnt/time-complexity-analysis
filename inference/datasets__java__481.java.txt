<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

class GFG {
  static int MinOperation(int a[], int n, int k) {

    int result = 0;

    for (int i = 0; i < n; ++i) {

      if (a[i] != 1 && a[i] > k) {

        result = result + Math.min(a[i] % k, k - a[i] % k);

      } else {

        result = result + k - a[i];
      }
    }

    return result;
  }

  public static void main(String[] args) {

    int arr[] = {4, 5, 6};

    int n = arr.length;

    int k = 5;

    System.out.println(MinOperation(arr, n, k));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. 


The reasoning behind the time complexity is:

The given code iterates through the entire array n times (n is the length of the array). 

The outer loop runs from i = 0 to n , which is in the order of n. 

Therefore, the time complexity is O(n).</s>