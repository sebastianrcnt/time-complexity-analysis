<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Scanner;

public class Codeforces {
  public static Scanner input = new Scanner(System.in);

  public static void main(String[] args) {
    int n, k;
    n = input.nextInt();
    k = input.nextInt();
    String s = input.next();
    int[] wtArray = new int[n];
    for (int i = 0; i < s.length(); i++) wtArray[i] = s.charAt(i) - 96;
    for (int i = 1; i < n; i++)
      for (int j = 0; j < n - i; j++)
        if (wtArray[j] > wtArray[j + 1]) {
          int temp = wtArray[j + 1];
          wtArray[j + 1] = wtArray[j];
          wtArray[j] = temp;
        }

    int sum = wtArray[0];
    k--;
    int temp = sum;
    for (int i = 1; k != 0 && i < n; i++) {
      if ((wtArray[i] - temp) > 1) {
        sum += wtArray[i];
        k--;
        temp = wtArray[i];
      }
    }
    if (k != 0) sum = -1;
    System.out.println(sum);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice]. It is linear time complexity since it uses one loop to sort the array wtArray using selection sort algorithm.

The outer loop executes n times. Inside the outer loop, the inner loop executes n - i times in each iteration to check if wtArray[j] is greater than wtArray[j + 1] and to swap their positions. Thus, the inner loop runs (n - i) times for each iteration of the outer loop, and its total number of iterations is 1 + 2 + ... + (n - 1).

Therefore, the total number of iterations is n(n-1)/2, which is of order O(n^2). Hence, the time complexity is O(n^2).</s>