<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;

public class First {
  StreamTokenizer in;
  PrintWriter out;

  int nextInt() throws IOException {
    in.nextToken();
    return (int) in.nval;
  }

  long nextLong() throws IOException {
    in.nextToken();
    return (long) in.nval;
  }

  String nextString() throws IOException {
    in.nextToken();
    return in.sval;
  }

  void run() throws IOException {
    in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    out = new PrintWriter(System.out);
    solve();
    out.flush();
  }

  void solve() throws IOException {
    int n = nextInt(), k = nextInt(), sum = 0, count = 0;
    String str = nextString();
    char[] arr = str.toCharArray();
    boolean[] bool = new boolean[26];
    for (char ch : arr) {
      bool[((int) ch) - 97] = true;
    }
    for (int i = 0; i < 26; i++) {
      if (bool[i]) {
        sum += i + 1;
        count++;
        i += 1;
      }
      if (count == k) break;
    }
    if (count == k) out.println(sum);
    else out.println(-1);
  }

  public static void main(String[] args) throws IOException {
    new First().run();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]0[/choice].

Explanation: The code uses several methods to read input from the user, but all of these methods have a time complexity of O(1) since they just read a single token from the stream. The method 'solve' is the only method that reads the whole input string and performs some operations on it. However, it is very efficient, since it sets the boolean array in O(n) time and then iterates through the array in O(n) time again. Therefore, the overall time complexity of the code is O(1). This is because of the efficient use of the StreamTokenizer and BufferedReader classes to read the input, and the use of dynamic memory allocation to store the boolean array to solve the problem in constant space.</s>