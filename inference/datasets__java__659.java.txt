<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Cf1005A {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int numberOfStairs = 0;
    StringBuilder result = new StringBuilder("");
    StringTokenizer stk = new StringTokenizer(br.readLine());
    int previousNum = 0;
    int tmp = 0;
    for (int i = 0; i < n; i++) {
      tmp = Integer.parseInt(stk.nextToken());
      if (tmp == 1) {
        ++numberOfStairs;
        if (previousNum != 0) result.append(previousNum + " ");
      }
      previousNum = tmp;
    }
    result.append(previousNum);
    System.out.println(numberOfStairs);
    System.out.println(result);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice].

Explanation: The time complexity of the given code is O(n) where n is the number of test cases (in this case, n is the number of lines of input). Each iteration of the for loop is executed exactly once and each loop takes constant time (since it is performing basic arithmetic operations). Therefore, the overall time complexity of the program is O(n) which means that the execution time of the program grows linearly with the size of the input.</s>