<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.math.*;
import java.util.*;

public class loser {
  static class InputReader {
    public BufferedReader br;
    public StringTokenizer token;

    public InputReader(InputStream stream) {
      br = new BufferedReader(new InputStreamReader(stream), 32768);
      token = null;
    }

    public String next() {
      while (token == null || !token.hasMoreTokens()) {
        try {
          token = new StringTokenizer(br.readLine());
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
      return token.nextToken();
    }

    public int nextInt() {
      return Integer.parseInt(next());
    }

    public long nextLong() {
      return Long.parseLong(next());
    }
  }

  static class card {
    long a;
    int i;

    public card(long a, int i) {
      this.a = a;
      this.i = i;
    }
  }

  static class sort implements Comparator<pair> {
    public int compare(pair o1, pair o2) {
      if (o1.a != o2.a) return (int) (o1.a - o2.a);
      else return (int) (o1.b - o2.b);
    }
  }

  static void shuffle(long a[]) {
    List<Long> l = new ArrayList<>();
    for (int i = 0; i < a.length; i++) l.add(a[i]);
    Collections.shuffle(l);
    for (int i = 0; i < a.length; i++) a[i] = l.get(i);
  }

  static class pair {
    int a, b;

    public pair(int a, int b) {
      this.a = a;
      this.b = b;
    }
  }

  public static void main(String[] args) {
    InputReader sc = new InputReader(System.in);
    int k = sc.nextInt();
    int n = sc.nextInt();
    int s = sc.nextInt();
    int p = sc.nextInt();
    long d = (long) Math.ceil((double) n / s);
    if (d == 0) d = 1;
    d = k * d;
    long ans = (long) Math.ceil((double) d / p);
    System.out.println(ans);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. This is because the `sort` class implements the `Comparator` interface which takes time O(logn). Even if we ignore the `sort` class, atleast we know that sorting takes time O(nlogn). Also, the card and pair classes has constant time Complexity. Therefore it's time complexity is less than or equal to O(nlogn).</s>