<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class Node {

  char data;

  Node left, right;

  Node(char item) {

    data = item;

    left = right = null;
  }
}

class BinaryTree {

  Node root;

  static int preIndex = 0;

  Node buildTree(char in[], char pre[], int inStrt, int inEnd) {

    if (inStrt > inEnd) return null;

    Node tNode = new Node(pre[preIndex++]);

    if (inStrt == inEnd) return tNode;

    int inIndex = search(in, inStrt, inEnd, tNode.data);

    tNode.left = buildTree(in, pre, inStrt, inIndex - 1);

    tNode.right = buildTree(in, pre, inIndex + 1, inEnd);

    return tNode;
  }

  int search(char arr[], int strt, int end, char value) {

    int i;

    for (i = strt; i <= end; i++) {

      if (arr[i] == value) return i;
    }

    return i;
  }

  void printInorder(Node node) {

    if (node == null) return;

    printInorder(node.left);

    System.out.print(node.data + " ");

    printInorder(node.right);
  }

  public static void main(String args[]) {

    BinaryTree tree = new BinaryTree();

    char in[] = new char[] {'D', 'B', 'E', 'A', 'F', 'C'};

    char pre[] = new char[] {'A', 'B', 'D', 'E', 'C', 'F'};

    int len = in.length;

    Node root = tree.buildTree(in, pre, 0, len - 1);

    System.out.println("Inorder traversal of constructed tree is : ");

    tree.printInorder(root);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. This is because the algorithm is using a recursive depth-first approach with the helper function search which finds the index of the given value in the sorted array in O(logn) time. Also the function buildTree is using the search function recursively to build the tree in O(logn) time.

The printInorder function is used to display the tree in a sorted order but its time complexity is O(n). Therefore, overall the time complexity of the given algorithm is O(logn).</s>