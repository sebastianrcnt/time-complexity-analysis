<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
class Test {

  static final int MAX_CHAR = 26;

  static int countPairs(String str) {

    int result = 0;

    int n = str.length();

    for (int i = 0; i < n; i++)
      for (int j = 1; (i + j) < n && j <= MAX_CHAR; j++)
        if ((Math.abs(str.charAt(i + j) - str.charAt(i)) == j)) result++;

    return result;
  }

  public static void main(String args[]) {

    String str = "geeksforgeeks";

    System.out.println(countPairs(str));
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]4[/choice]. This is because the innermost loop runs `n` times (one for each character), and each iteration of the outer loop, the inner loop iterates from 1 to the maximum possible value of `MAX_CHAR`, which is 26. Therefore, the time complexity of the inner loop is O(26), which multiplies by the time complexity of the outer loop (O(n)) to give the overall time complexity of O(26n), which simplifies to O(n^2).</s>