<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.*;
import java.util.*;

public class cf {
  static class FastScanner {
    BufferedReader br;
    StringTokenizer st;

    public FastScanner(Reader in) {
      br = new BufferedReader(in);
    }

    public FastScanner() {
      this(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String str = "";
      try {
        str = br.readLine();
      } catch (IOException e) {
        e.printStackTrace();
      }
      return str;
    }

    int[] nextIntArray(int n) {
      int[] a = new int[n];
      for (int idx = 0; idx < n; idx++) {
        a[idx] = nextInt();
      }
      return a;
    }
  }

  static int mod = 1000000007;

  public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    PrintWriter pw = new PrintWriter(System.out);

    int n = sc.nextInt(), k = sc.nextInt();
    int[] a = new int[n + 1];

    for (int i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
    a[n] = 0;
    Arrays.sort(a);

    for (int i = 1; i <= n; i++) {
      if (k == 0) {
        break;
      }
      if (a[i] != a[i - 1]) {
        k--;
        pw.println(a[i] - a[i - 1]);
      }
    }
    for (int i = 0; i < k; i++) pw.println(0);
    pw.close();
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. The reasons for this choice are:

1. The code has n lines of input, and for each line, it performs operations like scanning tokens and converting them to integers.
2. The code has n operations, where it iterates through the input array once and sorts it in O(nlogn) time using Arrays.sort().
3. The code then iterates through the sorted array once again, and performs k operations for each element.
4. So, the total number of operations performed by the code is nlogn + nk, which simplifies to n^2.
5. Since k is not provided in the code, it could be anything from 0 to n, which means that the upper bound of n^2 is n*n = n^2.
6. Therefore, the time complexity of the given code is O(n^2).</s>