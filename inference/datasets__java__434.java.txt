<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.ArrayList;

public class PrintPath {

  public static boolean hasPath(Node root, ArrayList<Integer> arr, int x) {

    if (root == null) return false;

    arr.add(root.data);

    if (root.data == x) return true;

    if (hasPath(root.left, arr, x) || hasPath(root.right, arr, x)) return true;

    arr.remove(arr.size() - 1);

    return false;
  }

  public static void printPath(Node root, int x) {

    ArrayList<Integer> arr = new ArrayList<>();

    if (hasPath(root, arr, x)) {

      for (int i = 0; i < arr.size() - 1; i++) System.out.print(arr.get(i) + "->");

      System.out.print(arr.get(arr.size() - 1));

    } else System.out.print("No Path");
  }

  public static void main(String args[]) {

    Node root = new Node(1);

    root.left = new Node(2);

    root.right = new Node(3);

    root.left.left = new Node(4);

    root.left.right = new Node(5);

    root.right.left = new Node(6);

    root.right.right = new Node(7);

    int x = 5;

    printPath(root, x);
  }
}

class Node {

  int data;

  Node left, right;

  Node(int data) {

    this.data = data;

    left = right = null;
  }
}
;


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]3[/choice]. This is because the code uses a loop to iterate through the tree, which means the time complexity is O(n) in the worst case. Note that the choice for option [choice]3[/choice] also assumes that the tree is not a binary search tree, as there is no guarantee that iterating through a binary search tree would result in an O(n) time complexity.</s>