<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.*;

class Solution {
  static int count = 0;

  static class Node {

    int data;

    Node left;

    Node right;
  }

  static Node newNode(int data) {

    Node node = new Node();

    node.data = data;

    node.left = null;

    node.right = null;

    return (node);
  }

  static void NthInorder(Node node, int n) {

    if (node == null) return;

    if (count <= n) {

      NthInorder(node.left, n);

      count++;

      if (count == n) System.out.printf("%d ", node.data);

      NthInorder(node.right, n);
    }
  }

  public static void main(String args[]) {

    Node root = newNode(10);

    root.left = newNode(20);

    root.right = newNode(30);

    root.left.left = newNode(40);

    root.left.right = newNode(50);

    int n = 4;

    NthInorder(root, n);
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice]. The reasoning for this answer is that the Nth Inorder function uses a recursive algorithm that traverses the binary tree in an inorder fashion, which takes O(logn) time for each call. Since the function is called for each node in the binary tree, the total time complexity is O(logn) * n = O(nlogn), which is the fourth option.</s>