<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.util.Scanner;

public class NickAndArray {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int array[] = new int[n];
    int max = Integer.MAX_VALUE;
    int index = 0;
    for (int i = 0; i < n; i++) {
      int k = sc.nextInt();
      array[i] = k;
      if (array[i] >= 0) {
        array[i] = -array[i] - 1;
      }
      if (array[i] < max) {
        max = array[i];
        index = i;
      }
    }
    if (n % 2 != 0) {
      array[index] = -array[index] - 1;
    }
    for (int i = 0; i < n; i++) {
      System.out.print(array[i] + " ");
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]2[/choice].

Explanation:
The time complexity of the code is O(n). This is because the code has a loop that iterates through the array, performing a constant amount of operations (comparisons and arithmetic operations) on each element. There are no other operations that contribute to the overall time complexity.

The loop in the main() method iterates n times, where n is the input size. The inner loop in the for-each statement iterates n times as well. Therefore, the total time complexity is O(n).</s>