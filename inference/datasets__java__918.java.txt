<s> 
Analyize the time complexity of the given code. Include your choice in the [choice][/choice] tag, and only include the number of the option. (e.g. [choice]1[/choice])


Given Code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class CommentaryBoxes {

  public static void main(String[] args) {

    FastReader in = new FastReader();

    long n = in.nextLong();
    long m = in.nextLong();
    long a = in.nextLong();
    long b = in.nextLong();
    long total = 0;

    long val = (n % m);
    if (n % m != 0) {

      long x = (val) * b;
      long y = (m - val) * a;

      total = Math.min(x, y);
    }
    System.out.println(Math.abs(total));
  }

  public static class FastReader {

    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String string = "";
      try {
        string = br.readLine();
      } catch (IOException e) {
        e.printStackTrace();
      }
      return string;
    }
  }
}


Options:
    0. O(1)
    1. O(logn)
    2. O(n)
    3. O(nlogn)
    4. O(n^2)

Among the Options above, the time complexity of the given code is [choice]1[/choice].

Explanation:
1. O(logn)

The given code runs in O(logn) time complexity because it uses a FastReader class that provides faster tokenization of input strings. The FastReader class has a `next` method that returns the next token from the input stream. If the token is a number, it returns that number as an integer or a long. If the token is a string, it returns it as a string. The `next` method uses a `StringTokenizer` object to tokenize the input stream, resulting in O(n) tokenization time. However, the `StringTokenizer` object is reset after each token, so the actual tokenization time is O(logn) in the worst case.</s>